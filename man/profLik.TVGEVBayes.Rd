% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/profLikTVGEVBayes.R
\name{profLik.TVGEVBayes}
\alias{profLik.TVGEVBayes}
\title{Profile-Likelihood Confidence Interval}
\usage{
\method{profLik}{TVGEVBayes}(
  object,
  fun = identity,
  level = 0.95,
  trace = 1,
  fixedParam = numeric(0),
  ...
)
}
\arguments{
\item{object}{A \code{TVGEVBayes} object.}

\item{fun}{A function of the parameter vector \code{psi} defining
the quantity or "parameter" for which the profile likelihood
interval will be computed. The default choice corresponds to
the inference on each component of the parameter vector
\eqn{\boldsymbol{\psi}}{psi}. It is a good practice to check
the function e.g. by applying it on the vector \code{psi}
obtained as \code{coef(object)} See \bold{Examples}.}

\item{level}{The confidence level.}

\item{trace}{Integer level of verbosity.}

\item{fixedParam}{A named numeric vector that can be used to fix
the value of one or several parameteers. See \bold{Examples}.}

\item{...}{Further arguments to be passed to \code{fun}.}
}
\value{
An object with class \code{"profLik.TVGEVBayes"}
inheriting from \code{"matrix"}. This is mainly a numeric
matrix with \code{length(level)} columns containing the Lower
and Upper confidence bounds in its two rows \code{"L"} and
\code{"U"}. Some more data are attached to the object in the
aim of building tools by using the \code{autoplot} method on
the returned object.
}
\description{
Compute a profile likelihood confidence interval for
a parameter of a \code{TVGEVBayes} object. This can be an
ordinary parameter, or a function of the parameter vector such
as a quantile function or a return level function.
}
\note{
Although \code{object} represents a fitted \emph{Bayesian}
model, the result is indeed a \emph{confidence} interval, not
a credible interval. This interval relates to the non-Bayesian
fitted model stored as \code{object$TVGEV}. The results should
not depend on the prior used for the Bayes inference, provided
that this prior is not too informative. Indded, the
requirement is that the MCMC iterates provide a good coverage
of the hig-likelihood region in the parameter space. The MCMC
sampling is here used a trick to avoid complex computations
such as the evaluation of the profile likelihood and more.
}
\examples{
df <- within(TXMax_Dijon, Date <- as.Date(sprintf("\%4d-01-01", Year)))
fit_b <- TVGEVBayes(data = df, date = "Date", response = "TXMax",
                   design = polynomX(date = Date, degree = 1),
                   loc = ~ t1, scale = ~ 1, shape = ~ 1,
                   seed = 1234)
parNames(fit_b$TVGEV)
confint(fit_b$TVGEV, method = "prof", trace = 0)

## It is a good practice to give the result as a named vector,
## be it of length one.
q100 <- function(psi) {
   theta <- psi2theta(model = fit_b$TVGEV, psi = psi, date = "2030-01-01")
   c("R100" = qGEV(0.99, loc = theta[1], scale = theta[2], shape = theta[3]))
}
q100(coef(fit_b$TVGEV))
## Should be fixed: one should be allowed to use `profLik` here
(prof_q100 <- beverstan:::profLik.TVGEVBayes(fit_b, fun = q100))

qfun <- function(psi) {
   theta <- psi2theta(model = fit_b$TVGEV, psi = psi, date = "2030-01-01")
   res <- qGEV(c(0.90, 0.99), loc = theta[1], scale = theta[2], shape = theta[3])
   names(res) <- c("RL10", "RL100")
   res 
}
qfun(coef(fit_b$TVGEV))
(prof_RLS <- beverstan:::profLik.TVGEVBayes(fit_b, fun = qfun))

## Check that `predict.TVGEV` compute the right profile likelihood
## interval
(pred <- predict(fit_b$TVGEV, new = "2030-01-01", period = c(10, 100),
                 conf = "prof", trace = 0))

## What if a Gumbel distribution was used...
(prof_Gumb1 <-
    beverstan:::profLik.TVGEVBayes(fit_b, fixedParam = c("xi_0" = 0.0)))
(prof_Gumb2 <-
    beverstan:::profLik.TVGEVBayes(fit_b, fun = qfun,
                                   fixedParam = c("xi_0" = 0.0)))

}
\seealso{
\code{\link{autoplot.profLik.TVGEVBayes}}.
}
