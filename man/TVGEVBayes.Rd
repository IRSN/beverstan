% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TVGEVBayes.R
\name{TVGEVBayes}
\alias{TVGEVBayes}
\title{Bayesian Inference for some Time-Varying Models with
Generalized Extreme Value Margins}
\usage{
TVGEVBayes(
  data,
  timeMAXdata = NULL,
  date,
  response,
  design = NULL,
  loc = ~1,
  scale = ~1,
  shape = ~1,
  prior = NULL,
  blockDuration = "year",
  sampleMiss = FALSE,
  trace = 0
)
}
\arguments{
\item{data}{A data frame containing at least the two variables:
response and date, with arbitrary names.}

\item{timeMAXdata}{When given, this must be an object with class
\code{"timeMAXdata"} specifying the largest observations for the
block maxima on one or several periods, usually historical
periods. See \code{\link{timeMAXdata}}.}

\item{date, response}{The names of the data and the response
variables as in \code{\link[NSGEV]{TVGEV}}.}

\item{design}{A \emph{call} that defines a design matrix with some
functions of the \code{Date} variable as its columns.}

\item{loc, scale, shape}{Formulas for the GEV parameters.}

\item{prior}{Not allowed yet.}

\item{blockDuration}{Not used yet.}

\item{sampleMiss}{Logical. If \code{TRUE} the missing values for the
response are sampled. They appear in the \code{sampleFit} element of
the returned object, and ar e in relation with the \code{ind_miss}
incex vector which give their position in the \code{data} element.}

\item{trace}{Integer level of verbosity.}
}
\value{
An object with (S3) class \code{"TVGEVBayes"}.
}
\description{
Bayesian inference for some Time-Varying models with GEV margins.
}
\details{
The Bayesian inference relies on Markov Chain Monte Carlo (MCMC)
sampling performed thanks to a \bold{Stan} code. The Stan code
needs to be compiled, which requires computing time.
}
\examples{
df <- within(TXMax_Dijon, Date <- as.Date(sprintf("\%4d-01-01", Year)))

## We now that a high temperature occured 1922-05-24, see
## Infoclimat where the observations "Donnees Offcielle Meteo-France"
## https://www.infoclimat.fr/climatologie/normales-records/1981-2010/dijon-longvic/valeurs/07280.html

tMD <- timeMAXdata("1922_1922" = list("1922-05-24" = c(34.4, Inf)))
                   ## "1923_1923" = list("1923-09-01" = c(34.0, Inf)))
fit <- TVGEVBayes(data = df,
                  timeMAXdata = tMD,
                  date = "Date", response = "TXMax",
                  design = breaksX(date = Date, breaks = "1970-01-01", degree = 1),
                  loc = ~ t1 + t1_1970, scale = ~ 1, shape = ~ 1)

## plot the regression mean with its 95\% confidence intervals, as
## coputed using the \code{fitted method}.
autoplot(fit) + ggtitle("Kink design \"breaksX\": posterior mean")
##' Return levels
autoplot(RL(fit)) + ggtitle("Kink design \"breaksX\": return levels")
autoplot(RL(fit, level = 0.95, smooth = TRUE)) +
    ggtitle("Kink design \"breaksX\": return levels")

## predictive distribution: by default for the next block
autoplot(predict(fit)) +
    ggtitle("Kink design \"breaksX\": prediction for next block")

## change the period.
autoplot(predict(fit, newTimeRange = "2020_2049")) +
    ggtitle("Kink design \"breaksX\": prediction for \"2020_2049\"")
\dontrun{
   library(shinystan)
   my_sso <- launch_shinystan(fit$stanFit)
}
fit2 <- TVGEVBayes(data = df,
                  timeMAXdata = tMD,
                  date = "Date", response = "TXMax",
                  design = natSplineX(date = Date, knots = "1970-01-01",
                                      boundaryKnots = c("1920-01-01", "2017-01-01")),
                  loc = ~ ns1 + ns2 + ns3 - 1, scale = ~ 1, shape = ~ 1)
autoplot(fit2) + ggtitle("Natural spline design: posterior mean")

}
