// Generated by rstantools.  Do not edit by hand.

/*
    beverstan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    beverstan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with beverstan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_TVGEVCensor_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_TVGEVCensor");
    reader.add_event(172, 170, "end", "model_TVGEVCensor");
    return reader;
}
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
gev_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& mu,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& sigma,
             const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& xi, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 11;
        validate_non_negative_index("t", "rows(y)", rows(y));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> t(rows(y));
        stan::math::initialize(t, DUMMY_VAR__);
        stan::math::fill(t, DUMMY_VAR__);
        current_statement_begin__ = 12;
        validate_non_negative_index("lp", "rows(y)", rows(y));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lp(rows(y));
        stan::math::initialize(lp, DUMMY_VAR__);
        stan::math::fill(lp, DUMMY_VAR__);
        current_statement_begin__ = 13;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        current_statement_begin__ = 14;
        stan::math::assign(n, rows(y));
        current_statement_begin__ = 15;
        for (int i = 1; i <= n; ++i) {
            current_statement_begin__ = 16;
            stan::model::assign(t, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (logical_eq(get_base1(xi, i, "xi", 1), 0) ? stan::math::exp(((get_base1(mu, i, "mu", 1) - get_base1(y, i, "y", 1)) / get_base1(sigma, i, "sigma", 1))) : pow((1.0 + (get_base1(xi, i, "xi", 1) * ((get_base1(y, i, "y", 1) - get_base1(mu, i, "mu", 1)) / get_base1(sigma, i, "sigma", 1)))), (-(1.0) / get_base1(xi, i, "xi", 1))) ), 
                        "assigning variable t");
            current_statement_begin__ = 18;
            stan::model::assign(lp, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        ((-(stan::math::log(get_base1(sigma, i, "sigma", 1))) + ((get_base1(xi, i, "xi", 1) + 1.0) * stan::math::log(get_base1(t, i, "t", 1)))) - get_base1(t, i, "t", 1)), 
                        "assigning variable lp");
        }
        current_statement_begin__ = 20;
        return stan::math::promote_scalar<fun_return_scalar_t__>(sum(lp));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
gev_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& mu,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& sigma,
             const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& xi, std::ostream* pstream__) {
    return gev_lpdf<false>(y,mu,sigma,xi, pstream__);
}
struct gev_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& mu,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& sigma,
             const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& xi, std::ostream* pstream__) const {
        return gev_lpdf(y, mu, sigma, xi, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
gev_lcdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& mu,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& sigma,
             const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& xi, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 24;
        validate_non_negative_index("t", "rows(y)", rows(y));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> t(rows(y));
        stan::math::initialize(t, DUMMY_VAR__);
        stan::math::fill(t, DUMMY_VAR__);
        current_statement_begin__ = 25;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        current_statement_begin__ = 26;
        stan::math::assign(n, rows(y));
        current_statement_begin__ = 27;
        for (int i = 1; i <= n; ++i) {
            current_statement_begin__ = 28;
            stan::model::assign(t, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (logical_eq(get_base1(xi, i, "xi", 1), 0) ? stan::math::exp(((get_base1(mu, i, "mu", 1) - get_base1(y, i, "y", 1)) / get_base1(sigma, i, "sigma", 1))) : pow((1.0 + (get_base1(xi, i, "xi", 1) * ((get_base1(y, i, "y", 1) - get_base1(mu, i, "mu", 1)) / get_base1(sigma, i, "sigma", 1)))), (-(1.0) / get_base1(xi, i, "xi", 1))) ), 
                        "assigning variable t");
        }
        current_statement_begin__ = 31;
        return stan::math::promote_scalar<fun_return_scalar_t__>(-(sum(t)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gev_lcdf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& y,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& mu,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& sigma,
             const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& xi, std::ostream* pstream__) const {
        return gev_lcdf(y, mu, sigma, xi, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
gev_cdf(const T0__& y,
            const T1__& mu,
            const T2__& sigma,
            const T3__& xi, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 35;
        local_scalar_t__ t(DUMMY_VAR__);
        (void) t;  // dummy to suppress unused var warning
        stan::math::initialize(t, DUMMY_VAR__);
        stan::math::fill(t, DUMMY_VAR__);
        current_statement_begin__ = 36;
        stan::math::assign(t, (logical_eq(xi, 0) ? stan::math::exp(((mu - y) / sigma)) : pow((1.0 + (xi * ((y - mu) / sigma))), (-(1.0) / xi)) ));
        current_statement_begin__ = 38;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(-(t)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gev_cdf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& y,
            const T1__& mu,
            const T2__& sigma,
            const T3__& xi, std::ostream* pstream__) const {
        return gev_cdf(y, mu, sigma, xi, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_TVGEVCensor
  : public stan::model::model_base_crtp<model_TVGEVCensor> {
private:
        int n_obs;
        int n_miss;
        int n_cens;
        vector_d y_obs;
        vector_d yL_cens;
        vector_d yU_cens;
        vector_d code_cens;
        int p_mu;
        int p_sigma;
        int p_xi;
        int cst_mu;
        int cst_sigma;
        int cst_xi;
        matrix_d X_mu_obs;
        matrix_d X_sigma_obs;
        matrix_d X_xi_obs;
        matrix_d X_mu_miss;
        matrix_d X_sigma_miss;
        matrix_d X_xi_miss;
        matrix_d X_mu_cens;
        matrix_d X_sigma_cens;
        matrix_d X_xi_cens;
        matrix_d cov_psi_mu;
        matrix_d cov_psi_sigma;
        matrix_d cov_psi_xi;
        vector_d mean_psi_mu;
        vector_d mean_psi_sigma;
        vector_d mean_psi_xi;
public:
    model_TVGEVCensor(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_TVGEVCensor(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_TVGEVCensor_namespace::model_TVGEVCensor";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 44;
            context__.validate_dims("data initialization", "n_obs", "int", context__.to_vec());
            n_obs = int(0);
            vals_i__ = context__.vals_i("n_obs");
            pos__ = 0;
            n_obs = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_obs", n_obs, 0);
            current_statement_begin__ = 45;
            context__.validate_dims("data initialization", "n_miss", "int", context__.to_vec());
            n_miss = int(0);
            vals_i__ = context__.vals_i("n_miss");
            pos__ = 0;
            n_miss = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_miss", n_miss, 0);
            current_statement_begin__ = 46;
            context__.validate_dims("data initialization", "n_cens", "int", context__.to_vec());
            n_cens = int(0);
            vals_i__ = context__.vals_i("n_cens");
            pos__ = 0;
            n_cens = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_cens", n_cens, 0);
            current_statement_begin__ = 48;
            validate_non_negative_index("y_obs", "n_obs", n_obs);
            context__.validate_dims("data initialization", "y_obs", "vector_d", context__.to_vec(n_obs));
            y_obs = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_obs);
            vals_r__ = context__.vals_r("y_obs");
            pos__ = 0;
            size_t y_obs_j_1_max__ = n_obs;
            for (size_t j_1__ = 0; j_1__ < y_obs_j_1_max__; ++j_1__) {
                y_obs(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 49;
            validate_non_negative_index("yL_cens", "n_cens", n_cens);
            context__.validate_dims("data initialization", "yL_cens", "vector_d", context__.to_vec(n_cens));
            yL_cens = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_cens);
            vals_r__ = context__.vals_r("yL_cens");
            pos__ = 0;
            size_t yL_cens_j_1_max__ = n_cens;
            for (size_t j_1__ = 0; j_1__ < yL_cens_j_1_max__; ++j_1__) {
                yL_cens(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 50;
            validate_non_negative_index("yU_cens", "n_cens", n_cens);
            context__.validate_dims("data initialization", "yU_cens", "vector_d", context__.to_vec(n_cens));
            yU_cens = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_cens);
            vals_r__ = context__.vals_r("yU_cens");
            pos__ = 0;
            size_t yU_cens_j_1_max__ = n_cens;
            for (size_t j_1__ = 0; j_1__ < yU_cens_j_1_max__; ++j_1__) {
                yU_cens(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 51;
            validate_non_negative_index("code_cens", "n_cens", n_cens);
            context__.validate_dims("data initialization", "code_cens", "vector_d", context__.to_vec(n_cens));
            code_cens = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_cens);
            vals_r__ = context__.vals_r("code_cens");
            pos__ = 0;
            size_t code_cens_j_1_max__ = n_cens;
            for (size_t j_1__ = 0; j_1__ < code_cens_j_1_max__; ++j_1__) {
                code_cens(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 54;
            context__.validate_dims("data initialization", "p_mu", "int", context__.to_vec());
            p_mu = int(0);
            vals_i__ = context__.vals_i("p_mu");
            pos__ = 0;
            p_mu = vals_i__[pos__++];
            check_greater_or_equal(function__, "p_mu", p_mu, 1);
            current_statement_begin__ = 55;
            context__.validate_dims("data initialization", "p_sigma", "int", context__.to_vec());
            p_sigma = int(0);
            vals_i__ = context__.vals_i("p_sigma");
            pos__ = 0;
            p_sigma = vals_i__[pos__++];
            check_greater_or_equal(function__, "p_sigma", p_sigma, 1);
            current_statement_begin__ = 56;
            context__.validate_dims("data initialization", "p_xi", "int", context__.to_vec());
            p_xi = int(0);
            vals_i__ = context__.vals_i("p_xi");
            pos__ = 0;
            p_xi = vals_i__[pos__++];
            check_greater_or_equal(function__, "p_xi", p_xi, 1);
            current_statement_begin__ = 59;
            context__.validate_dims("data initialization", "cst_mu", "int", context__.to_vec());
            cst_mu = int(0);
            vals_i__ = context__.vals_i("cst_mu");
            pos__ = 0;
            cst_mu = vals_i__[pos__++];
            check_greater_or_equal(function__, "cst_mu", cst_mu, 0);
            current_statement_begin__ = 60;
            context__.validate_dims("data initialization", "cst_sigma", "int", context__.to_vec());
            cst_sigma = int(0);
            vals_i__ = context__.vals_i("cst_sigma");
            pos__ = 0;
            cst_sigma = vals_i__[pos__++];
            check_greater_or_equal(function__, "cst_sigma", cst_sigma, 0);
            current_statement_begin__ = 61;
            context__.validate_dims("data initialization", "cst_xi", "int", context__.to_vec());
            cst_xi = int(0);
            vals_i__ = context__.vals_i("cst_xi");
            pos__ = 0;
            cst_xi = vals_i__[pos__++];
            check_greater_or_equal(function__, "cst_xi", cst_xi, 0);
            current_statement_begin__ = 64;
            validate_non_negative_index("X_mu_obs", "n_obs", n_obs);
            validate_non_negative_index("X_mu_obs", "p_mu", p_mu);
            context__.validate_dims("data initialization", "X_mu_obs", "matrix_d", context__.to_vec(n_obs,p_mu));
            X_mu_obs = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_obs, p_mu);
            vals_r__ = context__.vals_r("X_mu_obs");
            pos__ = 0;
            size_t X_mu_obs_j_2_max__ = p_mu;
            size_t X_mu_obs_j_1_max__ = n_obs;
            for (size_t j_2__ = 0; j_2__ < X_mu_obs_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_mu_obs_j_1_max__; ++j_1__) {
                    X_mu_obs(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 65;
            validate_non_negative_index("X_sigma_obs", "n_obs", n_obs);
            validate_non_negative_index("X_sigma_obs", "p_sigma", p_sigma);
            context__.validate_dims("data initialization", "X_sigma_obs", "matrix_d", context__.to_vec(n_obs,p_sigma));
            X_sigma_obs = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_obs, p_sigma);
            vals_r__ = context__.vals_r("X_sigma_obs");
            pos__ = 0;
            size_t X_sigma_obs_j_2_max__ = p_sigma;
            size_t X_sigma_obs_j_1_max__ = n_obs;
            for (size_t j_2__ = 0; j_2__ < X_sigma_obs_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_sigma_obs_j_1_max__; ++j_1__) {
                    X_sigma_obs(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 66;
            validate_non_negative_index("X_xi_obs", "n_obs", n_obs);
            validate_non_negative_index("X_xi_obs", "p_xi", p_xi);
            context__.validate_dims("data initialization", "X_xi_obs", "matrix_d", context__.to_vec(n_obs,p_xi));
            X_xi_obs = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_obs, p_xi);
            vals_r__ = context__.vals_r("X_xi_obs");
            pos__ = 0;
            size_t X_xi_obs_j_2_max__ = p_xi;
            size_t X_xi_obs_j_1_max__ = n_obs;
            for (size_t j_2__ = 0; j_2__ < X_xi_obs_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_xi_obs_j_1_max__; ++j_1__) {
                    X_xi_obs(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 69;
            validate_non_negative_index("X_mu_miss", "n_miss", n_miss);
            validate_non_negative_index("X_mu_miss", "p_mu", p_mu);
            context__.validate_dims("data initialization", "X_mu_miss", "matrix_d", context__.to_vec(n_miss,p_mu));
            X_mu_miss = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_miss, p_mu);
            vals_r__ = context__.vals_r("X_mu_miss");
            pos__ = 0;
            size_t X_mu_miss_j_2_max__ = p_mu;
            size_t X_mu_miss_j_1_max__ = n_miss;
            for (size_t j_2__ = 0; j_2__ < X_mu_miss_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_mu_miss_j_1_max__; ++j_1__) {
                    X_mu_miss(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 70;
            validate_non_negative_index("X_sigma_miss", "n_miss", n_miss);
            validate_non_negative_index("X_sigma_miss", "p_sigma", p_sigma);
            context__.validate_dims("data initialization", "X_sigma_miss", "matrix_d", context__.to_vec(n_miss,p_sigma));
            X_sigma_miss = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_miss, p_sigma);
            vals_r__ = context__.vals_r("X_sigma_miss");
            pos__ = 0;
            size_t X_sigma_miss_j_2_max__ = p_sigma;
            size_t X_sigma_miss_j_1_max__ = n_miss;
            for (size_t j_2__ = 0; j_2__ < X_sigma_miss_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_sigma_miss_j_1_max__; ++j_1__) {
                    X_sigma_miss(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 71;
            validate_non_negative_index("X_xi_miss", "n_miss", n_miss);
            validate_non_negative_index("X_xi_miss", "p_xi", p_xi);
            context__.validate_dims("data initialization", "X_xi_miss", "matrix_d", context__.to_vec(n_miss,p_xi));
            X_xi_miss = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_miss, p_xi);
            vals_r__ = context__.vals_r("X_xi_miss");
            pos__ = 0;
            size_t X_xi_miss_j_2_max__ = p_xi;
            size_t X_xi_miss_j_1_max__ = n_miss;
            for (size_t j_2__ = 0; j_2__ < X_xi_miss_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_xi_miss_j_1_max__; ++j_1__) {
                    X_xi_miss(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 74;
            validate_non_negative_index("X_mu_cens", "n_cens", n_cens);
            validate_non_negative_index("X_mu_cens", "p_mu", p_mu);
            context__.validate_dims("data initialization", "X_mu_cens", "matrix_d", context__.to_vec(n_cens,p_mu));
            X_mu_cens = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_cens, p_mu);
            vals_r__ = context__.vals_r("X_mu_cens");
            pos__ = 0;
            size_t X_mu_cens_j_2_max__ = p_mu;
            size_t X_mu_cens_j_1_max__ = n_cens;
            for (size_t j_2__ = 0; j_2__ < X_mu_cens_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_mu_cens_j_1_max__; ++j_1__) {
                    X_mu_cens(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 75;
            validate_non_negative_index("X_sigma_cens", "n_cens", n_cens);
            validate_non_negative_index("X_sigma_cens", "p_sigma", p_sigma);
            context__.validate_dims("data initialization", "X_sigma_cens", "matrix_d", context__.to_vec(n_cens,p_sigma));
            X_sigma_cens = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_cens, p_sigma);
            vals_r__ = context__.vals_r("X_sigma_cens");
            pos__ = 0;
            size_t X_sigma_cens_j_2_max__ = p_sigma;
            size_t X_sigma_cens_j_1_max__ = n_cens;
            for (size_t j_2__ = 0; j_2__ < X_sigma_cens_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_sigma_cens_j_1_max__; ++j_1__) {
                    X_sigma_cens(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 76;
            validate_non_negative_index("X_xi_cens", "n_cens", n_cens);
            validate_non_negative_index("X_xi_cens", "p_xi", p_xi);
            context__.validate_dims("data initialization", "X_xi_cens", "matrix_d", context__.to_vec(n_cens,p_xi));
            X_xi_cens = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_cens, p_xi);
            vals_r__ = context__.vals_r("X_xi_cens");
            pos__ = 0;
            size_t X_xi_cens_j_2_max__ = p_xi;
            size_t X_xi_cens_j_1_max__ = n_cens;
            for (size_t j_2__ = 0; j_2__ < X_xi_cens_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_xi_cens_j_1_max__; ++j_1__) {
                    X_xi_cens(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 79;
            validate_non_negative_index("cov_psi_mu", "p_mu", p_mu);
            validate_non_negative_index("cov_psi_mu", "p_mu", p_mu);
            context__.validate_dims("data initialization", "cov_psi_mu", "matrix_d", context__.to_vec(p_mu,p_mu));
            cov_psi_mu = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(p_mu, p_mu);
            vals_r__ = context__.vals_r("cov_psi_mu");
            pos__ = 0;
            size_t cov_psi_mu_j_2_max__ = p_mu;
            size_t cov_psi_mu_j_1_max__ = p_mu;
            for (size_t j_2__ = 0; j_2__ < cov_psi_mu_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < cov_psi_mu_j_1_max__; ++j_1__) {
                    cov_psi_mu(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 80;
            validate_non_negative_index("cov_psi_sigma", "p_sigma", p_sigma);
            validate_non_negative_index("cov_psi_sigma", "p_sigma", p_sigma);
            context__.validate_dims("data initialization", "cov_psi_sigma", "matrix_d", context__.to_vec(p_sigma,p_sigma));
            cov_psi_sigma = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(p_sigma, p_sigma);
            vals_r__ = context__.vals_r("cov_psi_sigma");
            pos__ = 0;
            size_t cov_psi_sigma_j_2_max__ = p_sigma;
            size_t cov_psi_sigma_j_1_max__ = p_sigma;
            for (size_t j_2__ = 0; j_2__ < cov_psi_sigma_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < cov_psi_sigma_j_1_max__; ++j_1__) {
                    cov_psi_sigma(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 81;
            validate_non_negative_index("cov_psi_xi", "p_xi", p_xi);
            validate_non_negative_index("cov_psi_xi", "p_xi", p_xi);
            context__.validate_dims("data initialization", "cov_psi_xi", "matrix_d", context__.to_vec(p_xi,p_xi));
            cov_psi_xi = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(p_xi, p_xi);
            vals_r__ = context__.vals_r("cov_psi_xi");
            pos__ = 0;
            size_t cov_psi_xi_j_2_max__ = p_xi;
            size_t cov_psi_xi_j_1_max__ = p_xi;
            for (size_t j_2__ = 0; j_2__ < cov_psi_xi_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < cov_psi_xi_j_1_max__; ++j_1__) {
                    cov_psi_xi(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 84;
            validate_non_negative_index("mean_psi_mu", "p_mu", p_mu);
            context__.validate_dims("data initialization", "mean_psi_mu", "vector_d", context__.to_vec(p_mu));
            mean_psi_mu = Eigen::Matrix<double, Eigen::Dynamic, 1>(p_mu);
            vals_r__ = context__.vals_r("mean_psi_mu");
            pos__ = 0;
            size_t mean_psi_mu_j_1_max__ = p_mu;
            for (size_t j_1__ = 0; j_1__ < mean_psi_mu_j_1_max__; ++j_1__) {
                mean_psi_mu(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 85;
            validate_non_negative_index("mean_psi_sigma", "p_sigma", p_sigma);
            context__.validate_dims("data initialization", "mean_psi_sigma", "vector_d", context__.to_vec(p_sigma));
            mean_psi_sigma = Eigen::Matrix<double, Eigen::Dynamic, 1>(p_sigma);
            vals_r__ = context__.vals_r("mean_psi_sigma");
            pos__ = 0;
            size_t mean_psi_sigma_j_1_max__ = p_sigma;
            for (size_t j_1__ = 0; j_1__ < mean_psi_sigma_j_1_max__; ++j_1__) {
                mean_psi_sigma(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 86;
            validate_non_negative_index("mean_psi_xi", "p_xi", p_xi);
            context__.validate_dims("data initialization", "mean_psi_xi", "vector_d", context__.to_vec(p_xi));
            mean_psi_xi = Eigen::Matrix<double, Eigen::Dynamic, 1>(p_xi);
            vals_r__ = context__.vals_r("mean_psi_xi");
            pos__ = 0;
            size_t mean_psi_xi_j_1_max__ = p_xi;
            for (size_t j_1__ = 0; j_1__ < mean_psi_xi_j_1_max__; ++j_1__) {
                mean_psi_xi(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 96;
            validate_non_negative_index("psi_mu", "p_mu", p_mu);
            num_params_r__ += p_mu;
            current_statement_begin__ = 97;
            validate_non_negative_index("psi_sigma", "p_sigma", p_sigma);
            num_params_r__ += p_sigma;
            current_statement_begin__ = 98;
            validate_non_negative_index("psi_xi", "p_xi", p_xi);
            num_params_r__ += p_xi;
            current_statement_begin__ = 99;
            validate_non_negative_index("y_miss", "n_miss", n_miss);
            num_params_r__ += n_miss;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_TVGEVCensor() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 96;
        if (!(context__.contains_r("psi_mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mu");
        pos__ = 0U;
        validate_non_negative_index("psi_mu", "p_mu", p_mu);
        context__.validate_dims("parameter initialization", "psi_mu", "vector_d", context__.to_vec(p_mu));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi_mu(p_mu);
        size_t psi_mu_j_1_max__ = p_mu;
        for (size_t j_1__ = 0; j_1__ < psi_mu_j_1_max__; ++j_1__) {
            psi_mu(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi_mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 97;
        if (!(context__.contains_r("psi_sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_sigma");
        pos__ = 0U;
        validate_non_negative_index("psi_sigma", "p_sigma", p_sigma);
        context__.validate_dims("parameter initialization", "psi_sigma", "vector_d", context__.to_vec(p_sigma));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi_sigma(p_sigma);
        size_t psi_sigma_j_1_max__ = p_sigma;
        for (size_t j_1__ = 0; j_1__ < psi_sigma_j_1_max__; ++j_1__) {
            psi_sigma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 98;
        if (!(context__.contains_r("psi_xi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_xi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_xi");
        pos__ = 0U;
        validate_non_negative_index("psi_xi", "p_xi", p_xi);
        context__.validate_dims("parameter initialization", "psi_xi", "vector_d", context__.to_vec(p_xi));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi_xi(p_xi);
        size_t psi_xi_j_1_max__ = p_xi;
        for (size_t j_1__ = 0; j_1__ < psi_xi_j_1_max__; ++j_1__) {
            psi_xi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi_xi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_xi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 99;
        if (!(context__.contains_r("y_miss")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable y_miss missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("y_miss");
        pos__ = 0U;
        validate_non_negative_index("y_miss", "n_miss", n_miss);
        context__.validate_dims("parameter initialization", "y_miss", "vector_d", context__.to_vec(n_miss));
        Eigen::Matrix<double, Eigen::Dynamic, 1> y_miss(n_miss);
        size_t y_miss_j_1_max__ = n_miss;
        for (size_t j_1__ = 0; j_1__ < y_miss_j_1_max__; ++j_1__) {
            y_miss(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(y_miss);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable y_miss: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 96;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi_mu;
            (void) psi_mu;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mu = in__.vector_constrain(p_mu, lp__);
            else
                psi_mu = in__.vector_constrain(p_mu);
            current_statement_begin__ = 97;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi_sigma;
            (void) psi_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_sigma = in__.vector_constrain(p_sigma, lp__);
            else
                psi_sigma = in__.vector_constrain(p_sigma);
            current_statement_begin__ = 98;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi_xi;
            (void) psi_xi;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_xi = in__.vector_constrain(p_xi, lp__);
            else
                psi_xi = in__.vector_constrain(p_xi);
            current_statement_begin__ = 99;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y_miss;
            (void) y_miss;  // dummy to suppress unused var warning
            if (jacobian__)
                y_miss = in__.vector_constrain(n_miss, lp__);
            else
                y_miss = in__.vector_constrain(n_miss);
            // model body
            {
            current_statement_begin__ = 106;
            validate_non_negative_index("mu_obs", "n_obs", n_obs);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu_obs(n_obs);
            stan::math::initialize(mu_obs, DUMMY_VAR__);
            stan::math::fill(mu_obs, DUMMY_VAR__);
            current_statement_begin__ = 107;
            validate_non_negative_index("sigma_obs", "n_obs", n_obs);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_obs(n_obs);
            stan::math::initialize(sigma_obs, DUMMY_VAR__);
            stan::math::fill(sigma_obs, DUMMY_VAR__);
            current_statement_begin__ = 108;
            validate_non_negative_index("xi_obs", "n_obs", n_obs);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> xi_obs(n_obs);
            stan::math::initialize(xi_obs, DUMMY_VAR__);
            stan::math::fill(xi_obs, DUMMY_VAR__);
            current_statement_begin__ = 110;
            validate_non_negative_index("mu_miss", "n_miss", n_miss);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu_miss(n_miss);
            stan::math::initialize(mu_miss, DUMMY_VAR__);
            stan::math::fill(mu_miss, DUMMY_VAR__);
            current_statement_begin__ = 111;
            validate_non_negative_index("sigma_miss", "n_miss", n_miss);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_miss(n_miss);
            stan::math::initialize(sigma_miss, DUMMY_VAR__);
            stan::math::fill(sigma_miss, DUMMY_VAR__);
            current_statement_begin__ = 112;
            validate_non_negative_index("xi_miss", "n_miss", n_miss);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> xi_miss(n_miss);
            stan::math::initialize(xi_miss, DUMMY_VAR__);
            stan::math::fill(xi_miss, DUMMY_VAR__);
            current_statement_begin__ = 114;
            validate_non_negative_index("mu_cens", "n_cens", n_cens);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu_cens(n_cens);
            stan::math::initialize(mu_cens, DUMMY_VAR__);
            stan::math::fill(mu_cens, DUMMY_VAR__);
            current_statement_begin__ = 115;
            validate_non_negative_index("sigma_cens", "n_cens", n_cens);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_cens(n_cens);
            stan::math::initialize(sigma_cens, DUMMY_VAR__);
            stan::math::fill(sigma_cens, DUMMY_VAR__);
            current_statement_begin__ = 116;
            validate_non_negative_index("xi_cens", "n_cens", n_cens);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> xi_cens(n_cens);
            stan::math::initialize(xi_cens, DUMMY_VAR__);
            stan::math::fill(xi_cens, DUMMY_VAR__);
            current_statement_begin__ = 120;
            lp_accum__.add(multi_normal_log<propto__>(psi_mu, mean_psi_mu, cov_psi_mu));
            current_statement_begin__ = 121;
            lp_accum__.add(multi_normal_log<propto__>(psi_sigma, mean_psi_sigma, cov_psi_sigma));
            current_statement_begin__ = 122;
            lp_accum__.add(multi_normal_log<propto__>(psi_xi, mean_psi_xi, cov_psi_xi));
            current_statement_begin__ = 124;
            if (as_bool(cst_mu)) {
                current_statement_begin__ = 125;
                for (int i = 1; i <= n_obs; ++i) {
                    current_statement_begin__ = 125;
                    stan::model::assign(mu_obs, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(psi_mu, 1, "psi_mu", 1), 
                                "assigning variable mu_obs");
                }
                current_statement_begin__ = 126;
                for (int i = 1; i <= n_miss; ++i) {
                    current_statement_begin__ = 126;
                    stan::model::assign(mu_miss, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(psi_mu, 1, "psi_mu", 1), 
                                "assigning variable mu_miss");
                }
                current_statement_begin__ = 127;
                for (int i = 1; i <= n_cens; ++i) {
                    current_statement_begin__ = 127;
                    stan::model::assign(mu_cens, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(psi_mu, 1, "psi_mu", 1), 
                                "assigning variable mu_cens");
                }
            } else {
                current_statement_begin__ = 129;
                stan::math::assign(mu_obs, multiply(X_mu_obs, psi_mu));
                current_statement_begin__ = 130;
                if (as_bool(n_miss)) {
                    current_statement_begin__ = 130;
                    stan::math::assign(mu_miss, multiply(X_mu_miss, psi_mu));
                }
                current_statement_begin__ = 131;
                if (as_bool(n_cens)) {
                    current_statement_begin__ = 131;
                    stan::math::assign(mu_cens, multiply(X_mu_cens, psi_mu));
                }
            }
            current_statement_begin__ = 134;
            if (as_bool(cst_sigma)) {
                current_statement_begin__ = 135;
                for (int i = 1; i <= n_obs; ++i) {
                    current_statement_begin__ = 135;
                    stan::model::assign(sigma_obs, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(psi_sigma, 1, "psi_sigma", 1), 
                                "assigning variable sigma_obs");
                }
                current_statement_begin__ = 136;
                for (int i = 1; i <= n_miss; ++i) {
                    current_statement_begin__ = 136;
                    stan::model::assign(sigma_miss, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(psi_sigma, 1, "psi_sigma", 1), 
                                "assigning variable sigma_miss");
                }
                current_statement_begin__ = 137;
                for (int i = 1; i <= n_cens; ++i) {
                    current_statement_begin__ = 137;
                    stan::model::assign(sigma_cens, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(psi_sigma, 1, "psi_sigma", 1), 
                                "assigning variable sigma_cens");
                }
            } else {
                current_statement_begin__ = 139;
                stan::math::assign(sigma_obs, multiply(X_sigma_obs, psi_sigma));
                current_statement_begin__ = 140;
                if (as_bool(n_miss)) {
                    current_statement_begin__ = 140;
                    stan::math::assign(sigma_miss, multiply(X_sigma_miss, psi_sigma));
                }
                current_statement_begin__ = 141;
                if (as_bool(n_cens)) {
                    current_statement_begin__ = 141;
                    stan::math::assign(sigma_cens, multiply(X_sigma_cens, psi_mu));
                }
            }
            current_statement_begin__ = 144;
            if (as_bool(cst_xi)) {
                current_statement_begin__ = 145;
                for (int i = 1; i <= n_obs; ++i) {
                    current_statement_begin__ = 145;
                    stan::model::assign(xi_obs, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(psi_xi, 1, "psi_xi", 1), 
                                "assigning variable xi_obs");
                }
                current_statement_begin__ = 146;
                for (int i = 1; i <= n_miss; ++i) {
                    current_statement_begin__ = 146;
                    stan::model::assign(xi_miss, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(psi_xi, 1, "psi_xi", 1), 
                                "assigning variable xi_miss");
                }
                current_statement_begin__ = 147;
                for (int i = 1; i <= n_cens; ++i) {
                    current_statement_begin__ = 147;
                    stan::model::assign(xi_cens, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(psi_xi, 1, "psi_xi", 1), 
                                "assigning variable xi_cens");
                }
            } else {
                current_statement_begin__ = 149;
                stan::math::assign(xi_obs, multiply(X_xi_obs, psi_xi));
                current_statement_begin__ = 150;
                if (as_bool(n_miss)) {
                    current_statement_begin__ = 150;
                    stan::math::assign(xi_miss, multiply(X_xi_miss, psi_xi));
                }
                current_statement_begin__ = 151;
                if (as_bool(n_cens)) {
                    current_statement_begin__ = 151;
                    stan::math::assign(xi_cens, multiply(X_xi_cens, psi_xi));
                }
            }
            current_statement_begin__ = 155;
            lp_accum__.add(gev_lpdf<propto__>(y_obs, mu_obs, sigma_obs, xi_obs, pstream__));
            current_statement_begin__ = 156;
            if (as_bool(n_miss)) {
                current_statement_begin__ = 156;
                lp_accum__.add(gev_lpdf<propto__>(y_miss, mu_miss, sigma_miss, xi_miss, pstream__));
            }
            current_statement_begin__ = 159;
            for (int i = 1; i <= n_cens; ++i) {
                current_statement_begin__ = 160;
                if (as_bool(logical_eq(get_base1(code_cens, i, "code_cens", 1), 1))) {
                    current_statement_begin__ = 161;
                    lp_accum__.add(stan::math::log((1.0 - gev_cdf(get_base1(yL_cens, i, "yL_cens", 1), get_base1(mu_cens, i, "mu_cens", 1), get_base1(sigma_cens, i, "sigma_cens", 1), get_base1(xi_cens, i, "xi_cens", 1), pstream__))));
                } else if (as_bool(logical_eq(get_base1(code_cens, i, "code_cens", 1), 2))) {
                    current_statement_begin__ = 163;
                    lp_accum__.add(stan::math::log((gev_cdf(get_base1(yU_cens, i, "yU_cens", 1), get_base1(mu_cens, i, "mu_cens", 1), get_base1(sigma_cens, i, "sigma_cens", 1), get_base1(xi_cens, i, "xi_cens", 1), pstream__) - gev_cdf(get_base1(yL_cens, i, "yL_cens", 1), get_base1(mu_cens, i, "mu_cens", 1), get_base1(sigma_cens, i, "sigma_cens", 1), get_base1(xi_cens, i, "xi_cens", 1), pstream__))));
                } else if (as_bool(logical_eq(get_base1(code_cens, i, "code_cens", 1), 3))) {
                    current_statement_begin__ = 166;
                    lp_accum__.add(stan::math::log(gev_cdf(get_base1(yU_cens, i, "yU_cens", 1), get_base1(mu_cens, i, "mu_cens", 1), get_base1(sigma_cens, i, "sigma_cens", 1), get_base1(xi_cens, i, "xi_cens", 1), pstream__)));
                }
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("psi_mu");
        names__.push_back("psi_sigma");
        names__.push_back("psi_xi");
        names__.push_back("y_miss");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(p_mu);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p_sigma);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p_xi);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_miss);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_TVGEVCensor_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi_mu = in__.vector_constrain(p_mu);
        size_t psi_mu_j_1_max__ = p_mu;
        for (size_t j_1__ = 0; j_1__ < psi_mu_j_1_max__; ++j_1__) {
            vars__.push_back(psi_mu(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi_sigma = in__.vector_constrain(p_sigma);
        size_t psi_sigma_j_1_max__ = p_sigma;
        for (size_t j_1__ = 0; j_1__ < psi_sigma_j_1_max__; ++j_1__) {
            vars__.push_back(psi_sigma(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi_xi = in__.vector_constrain(p_xi);
        size_t psi_xi_j_1_max__ = p_xi;
        for (size_t j_1__ = 0; j_1__ < psi_xi_j_1_max__; ++j_1__) {
            vars__.push_back(psi_xi(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> y_miss = in__.vector_constrain(n_miss);
        size_t y_miss_j_1_max__ = n_miss;
        for (size_t j_1__ = 0; j_1__ < y_miss_j_1_max__; ++j_1__) {
            vars__.push_back(y_miss(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_TVGEVCensor";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t psi_mu_j_1_max__ = p_mu;
        for (size_t j_1__ = 0; j_1__ < psi_mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi_mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi_sigma_j_1_max__ = p_sigma;
        for (size_t j_1__ = 0; j_1__ < psi_sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi_sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi_xi_j_1_max__ = p_xi;
        for (size_t j_1__ = 0; j_1__ < psi_xi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi_xi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_miss_j_1_max__ = n_miss;
        for (size_t j_1__ = 0; j_1__ < y_miss_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_miss" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t psi_mu_j_1_max__ = p_mu;
        for (size_t j_1__ = 0; j_1__ < psi_mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi_mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi_sigma_j_1_max__ = p_sigma;
        for (size_t j_1__ = 0; j_1__ < psi_sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi_sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi_xi_j_1_max__ = p_xi;
        for (size_t j_1__ = 0; j_1__ < psi_xi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi_xi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_miss_j_1_max__ = n_miss;
        for (size_t j_1__ = 0; j_1__ < y_miss_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_miss" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_TVGEVCensor_namespace::model_TVGEVCensor stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
