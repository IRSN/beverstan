// Generated by rstantools.  Do not edit by hand.

/*
    beverstan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    beverstan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with beverstan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_TVGEVCensor_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'TVGEVCensor', line 89, column 2 to column 22)",
                                                      " (in 'TVGEVCensor', line 90, column 2 to column 28)",
                                                      " (in 'TVGEVCensor', line 91, column 2 to column 22)",
                                                      " (in 'TVGEVCensor', line 92, column 2 to column 24)",
                                                      " (in 'TVGEVCensor', line 97, column 9 to column 14)",
                                                      " (in 'TVGEVCensor', line 97, column 2 to column 23)",
                                                      " (in 'TVGEVCensor', line 98, column 9 to column 14)",
                                                      " (in 'TVGEVCensor', line 98, column 2 to column 26)",
                                                      " (in 'TVGEVCensor', line 99, column 9 to column 14)",
                                                      " (in 'TVGEVCensor', line 99, column 2 to column 23)",
                                                      " (in 'TVGEVCensor', line 100, column 9 to column 15)",
                                                      " (in 'TVGEVCensor', line 100, column 2 to column 25)",
                                                      " (in 'TVGEVCensor', line 101, column 9 to column 15)",
                                                      " (in 'TVGEVCensor', line 101, column 2 to column 28)",
                                                      " (in 'TVGEVCensor', line 102, column 9 to column 15)",
                                                      " (in 'TVGEVCensor', line 102, column 2 to column 25)",
                                                      " (in 'TVGEVCensor', line 104, column 9 to column 15)",
                                                      " (in 'TVGEVCensor', line 104, column 2 to column 25)",
                                                      " (in 'TVGEVCensor', line 105, column 9 to column 15)",
                                                      " (in 'TVGEVCensor', line 105, column 2 to column 28)",
                                                      " (in 'TVGEVCensor', line 106, column 9 to column 15)",
                                                      " (in 'TVGEVCensor', line 106, column 2 to column 25)",
                                                      " (in 'TVGEVCensor', line 109, column 2 to column 49)",
                                                      " (in 'TVGEVCensor', line 110, column 2 to column 58)",
                                                      " (in 'TVGEVCensor', line 111, column 2 to column 49)",
                                                      " (in 'TVGEVCensor', line 118, column 4 to column 31)",
                                                      " (in 'TVGEVCensor', line 119, column 16 to column 45)",
                                                      " (in 'TVGEVCensor', line 119, column 4 to column 45)",
                                                      " (in 'TVGEVCensor', line 120, column 16 to column 45)",
                                                      " (in 'TVGEVCensor', line 120, column 4 to column 45)",
                                                      " (in 'TVGEVCensor', line 117, column 9 to line 121, column 3)",
                                                      " (in 'TVGEVCensor', line 114, column 23 to column 45)",
                                                      " (in 'TVGEVCensor', line 114, column 4 to column 45)",
                                                      " (in 'TVGEVCensor', line 115, column 24 to column 47)",
                                                      " (in 'TVGEVCensor', line 115, column 4 to column 47)",
                                                      " (in 'TVGEVCensor', line 116, column 24 to column 47)",
                                                      " (in 'TVGEVCensor', line 116, column 4 to column 47)",
                                                      " (in 'TVGEVCensor', line 113, column 14 to line 117, column 3)",
                                                      " (in 'TVGEVCensor', line 113, column 2 to line 121, column 3)",
                                                      " (in 'TVGEVCensor', line 128, column 4 to column 40)",
                                                      " (in 'TVGEVCensor', line 129, column 16 to column 54)",
                                                      " (in 'TVGEVCensor', line 129, column 4 to column 54)",
                                                      " (in 'TVGEVCensor', line 130, column 16 to column 51)",
                                                      " (in 'TVGEVCensor', line 130, column 4 to column 51)",
                                                      " (in 'TVGEVCensor', line 127, column 9 to line 131, column 3)",
                                                      " (in 'TVGEVCensor', line 124, column 23 to column 51)",
                                                      " (in 'TVGEVCensor', line 124, column 4 to column 51)",
                                                      " (in 'TVGEVCensor', line 125, column 24 to column 53)",
                                                      " (in 'TVGEVCensor', line 125, column 4 to column 53)",
                                                      " (in 'TVGEVCensor', line 126, column 24 to column 53)",
                                                      " (in 'TVGEVCensor', line 126, column 4 to column 53)",
                                                      " (in 'TVGEVCensor', line 123, column 17 to line 127, column 3)",
                                                      " (in 'TVGEVCensor', line 123, column 2 to line 131, column 3)",
                                                      " (in 'TVGEVCensor', line 138, column 4 to column 31)",
                                                      " (in 'TVGEVCensor', line 139, column 16 to column 45)",
                                                      " (in 'TVGEVCensor', line 139, column 4 to column 45)",
                                                      " (in 'TVGEVCensor', line 140, column 16 to column 45)",
                                                      " (in 'TVGEVCensor', line 140, column 4 to column 45)",
                                                      " (in 'TVGEVCensor', line 137, column 9 to line 141, column 3)",
                                                      " (in 'TVGEVCensor', line 134, column 23 to column 45)",
                                                      " (in 'TVGEVCensor', line 134, column 4 to column 45)",
                                                      " (in 'TVGEVCensor', line 135, column 24 to column 47)",
                                                      " (in 'TVGEVCensor', line 135, column 4 to column 47)",
                                                      " (in 'TVGEVCensor', line 136, column 24 to column 47)",
                                                      " (in 'TVGEVCensor', line 136, column 4 to column 47)",
                                                      " (in 'TVGEVCensor', line 133, column 14 to line 137, column 3)",
                                                      " (in 'TVGEVCensor', line 133, column 2 to line 141, column 3)",
                                                      " (in 'TVGEVCensor', line 144, column 2 to column 41)",
                                                      " (in 'TVGEVCensor', line 145, column 14 to column 57)",
                                                      " (in 'TVGEVCensor', line 145, column 2 to column 57)",
                                                      " (in 'TVGEVCensor', line 154, column 6 to column 80)",
                                                      " (in 'TVGEVCensor', line 153, column 34 to line 155, column 5)",
                                                      " (in 'TVGEVCensor', line 153, column 11 to line 155, column 5)",
                                                      " (in 'TVGEVCensor', line 151, column 6 to line 152, column 68)",
                                                      " (in 'TVGEVCensor', line 150, column 34 to line 153, column 5)",
                                                      " (in 'TVGEVCensor', line 150, column 11 to line 155, column 5)",
                                                      " (in 'TVGEVCensor', line 149, column 6 to column 86)",
                                                      " (in 'TVGEVCensor', line 148, column 27 to line 150, column 5)",
                                                      " (in 'TVGEVCensor', line 148, column 4 to line 155, column 5)",
                                                      " (in 'TVGEVCensor', line 147, column 22 to line 156, column 3)",
                                                      " (in 'TVGEVCensor', line 147, column 2 to line 156, column 3)",
                                                      " (in 'TVGEVCensor', line 40, column 2 to column 21)",
                                                      " (in 'TVGEVCensor', line 41, column 2 to column 22)",
                                                      " (in 'TVGEVCensor', line 42, column 2 to column 22)",
                                                      " (in 'TVGEVCensor', line 44, column 9 to column 14)",
                                                      " (in 'TVGEVCensor', line 44, column 2 to column 22)",
                                                      " (in 'TVGEVCensor', line 45, column 9 to column 15)",
                                                      " (in 'TVGEVCensor', line 45, column 2 to column 25)",
                                                      " (in 'TVGEVCensor', line 46, column 9 to column 15)",
                                                      " (in 'TVGEVCensor', line 46, column 2 to column 25)",
                                                      " (in 'TVGEVCensor', line 47, column 9 to column 15)",
                                                      " (in 'TVGEVCensor', line 47, column 2 to column 27)",
                                                      " (in 'TVGEVCensor', line 50, column 2 to column 20)",
                                                      " (in 'TVGEVCensor', line 51, column 2 to column 23)",
                                                      " (in 'TVGEVCensor', line 52, column 2 to column 20)",
                                                      " (in 'TVGEVCensor', line 55, column 2 to column 22)",
                                                      " (in 'TVGEVCensor', line 56, column 2 to column 25)",
                                                      " (in 'TVGEVCensor', line 57, column 2 to column 22)",
                                                      " (in 'TVGEVCensor', line 60, column 9 to column 14)",
                                                      " (in 'TVGEVCensor', line 60, column 16 to column 20)",
                                                      " (in 'TVGEVCensor', line 60, column 2 to column 31)",
                                                      " (in 'TVGEVCensor', line 61, column 9 to column 14)",
                                                      " (in 'TVGEVCensor', line 61, column 16 to column 23)",
                                                      " (in 'TVGEVCensor', line 61, column 2 to column 37)",
                                                      " (in 'TVGEVCensor', line 62, column 9 to column 14)",
                                                      " (in 'TVGEVCensor', line 62, column 16 to column 20)",
                                                      " (in 'TVGEVCensor', line 62, column 2 to column 31)",
                                                      " (in 'TVGEVCensor', line 64, column 9 to column 15)",
                                                      " (in 'TVGEVCensor', line 64, column 17 to column 21)",
                                                      " (in 'TVGEVCensor', line 64, column 2 to column 33)",
                                                      " (in 'TVGEVCensor', line 65, column 9 to column 15)",
                                                      " (in 'TVGEVCensor', line 65, column 17 to column 24)",
                                                      " (in 'TVGEVCensor', line 65, column 2 to column 39)",
                                                      " (in 'TVGEVCensor', line 66, column 9 to column 15)",
                                                      " (in 'TVGEVCensor', line 66, column 17 to column 21)",
                                                      " (in 'TVGEVCensor', line 66, column 2 to column 33)",
                                                      " (in 'TVGEVCensor', line 69, column 9 to column 15)",
                                                      " (in 'TVGEVCensor', line 69, column 17 to column 21)",
                                                      " (in 'TVGEVCensor', line 69, column 2 to column 33)",
                                                      " (in 'TVGEVCensor', line 70, column 9 to column 15)",
                                                      " (in 'TVGEVCensor', line 70, column 17 to column 24)",
                                                      " (in 'TVGEVCensor', line 70, column 2 to column 39)",
                                                      " (in 'TVGEVCensor', line 71, column 9 to column 15)",
                                                      " (in 'TVGEVCensor', line 71, column 17 to column 21)",
                                                      " (in 'TVGEVCensor', line 71, column 2 to column 33)",
                                                      " (in 'TVGEVCensor', line 74, column 9 to column 13)",
                                                      " (in 'TVGEVCensor', line 74, column 15 to column 19)",
                                                      " (in 'TVGEVCensor', line 74, column 2 to column 32)",
                                                      " (in 'TVGEVCensor', line 75, column 9 to column 16)",
                                                      " (in 'TVGEVCensor', line 75, column 18 to column 25)",
                                                      " (in 'TVGEVCensor', line 75, column 2 to column 41)",
                                                      " (in 'TVGEVCensor', line 76, column 9 to column 13)",
                                                      " (in 'TVGEVCensor', line 76, column 15 to column 19)",
                                                      " (in 'TVGEVCensor', line 76, column 2 to column 32)",
                                                      " (in 'TVGEVCensor', line 79, column 9 to column 13)",
                                                      " (in 'TVGEVCensor', line 79, column 2 to column 27)",
                                                      " (in 'TVGEVCensor', line 80, column 9 to column 16)",
                                                      " (in 'TVGEVCensor', line 80, column 2 to column 33)",
                                                      " (in 'TVGEVCensor', line 81, column 9 to column 13)",
                                                      " (in 'TVGEVCensor', line 81, column 2 to column 27)",
                                                      " (in 'TVGEVCensor', line 89, column 9 to column 13)",
                                                      " (in 'TVGEVCensor', line 90, column 9 to column 16)",
                                                      " (in 'TVGEVCensor', line 91, column 9 to column 13)",
                                                      " (in 'TVGEVCensor', line 92, column 9 to column 15)",
                                                      " (in 'TVGEVCensor', line 7, column 11 to column 18)",
                                                      " (in 'TVGEVCensor', line 7, column 4 to column 22)",
                                                      " (in 'TVGEVCensor', line 8, column 11 to column 18)",
                                                      " (in 'TVGEVCensor', line 8, column 4 to column 23)",
                                                      " (in 'TVGEVCensor', line 9, column 4 to column 10)",
                                                      " (in 'TVGEVCensor', line 10, column 4 to column 16)",
                                                      " (in 'TVGEVCensor', line 12, column 6 to line 13, column 62)",
                                                      " (in 'TVGEVCensor', line 14, column 6 to column 64)",
                                                      " (in 'TVGEVCensor', line 11, column 17 to line 15, column 5)",
                                                      " (in 'TVGEVCensor', line 11, column 4 to line 15, column 5)",
                                                      " (in 'TVGEVCensor', line 16, column 4 to column 19)",
                                                      " (in 'TVGEVCensor', line 6, column 62 to line 17, column 3)",
                                                      " (in 'TVGEVCensor', line 20, column 11 to column 18)",
                                                      " (in 'TVGEVCensor', line 20, column 4 to column 22)",
                                                      " (in 'TVGEVCensor', line 21, column 4 to column 10)",
                                                      " (in 'TVGEVCensor', line 22, column 4 to column 16)",
                                                      " (in 'TVGEVCensor', line 24, column 6 to line 25, column 62)",
                                                      " (in 'TVGEVCensor', line 23, column 17 to line 26, column 5)",
                                                      " (in 'TVGEVCensor', line 23, column 4 to line 26, column 5)",
                                                      " (in 'TVGEVCensor', line 27, column 4 to column 19)",
                                                      " (in 'TVGEVCensor', line 19, column 62 to line 28, column 3)",
                                                      " (in 'TVGEVCensor', line 31, column 4 to column 11)",
                                                      " (in 'TVGEVCensor', line 32, column 4 to line 33, column 52)",
                                                      " (in 'TVGEVCensor', line 34, column 4 to column 19)",
                                                      " (in 'TVGEVCensor', line 30, column 53 to line 35, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>
gev_lpdf(const T0__& y_arg__, const T1__& mu_arg__, const T2__& sigma_arg__,
         const T3__& xi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  const auto& y = to_ref(y_arg__);
  const auto& mu = to_ref(mu_arg__);
  const auto& sigma = to_ref(sigma_arg__);
  const auto& xi = to_ref(xi_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 145;
    validate_non_negative_index("t", "rows(y)", rows(y));
    Eigen::Matrix<local_scalar_t__, -1, 1> t;
    t = Eigen::Matrix<local_scalar_t__, -1, 1>(rows(y));
    stan::math::fill(t, DUMMY_VAR__);
    
    current_statement__ = 147;
    validate_non_negative_index("lp", "rows(y)", rows(y));
    Eigen::Matrix<local_scalar_t__, -1, 1> lp;
    lp = Eigen::Matrix<local_scalar_t__, -1, 1>(rows(y));
    stan::math::fill(lp, DUMMY_VAR__);
    
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 150;
    n = rows(y);
    current_statement__ = 154;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 151;
      assign(t, cons_list(index_uni(i), nil_index_list()),
        (logical_eq(xi[(i - 1)], 0) ?
           stan::math::exp(((mu[(i - 1)] - y[(i - 1)]) / sigma[(i - 1)])) :
           pow(
             (1.0 +
               (xi[(i - 1)] * ((y[(i - 1)] - mu[(i - 1)]) / sigma[(i - 1)]))),
             (-1.0 / xi[(i - 1)]))), "assigning variable t");
      current_statement__ = 152;
      assign(lp, cons_list(index_uni(i), nil_index_list()),
        ((-stan::math::log(sigma[(i - 1)]) +
           ((xi[(i - 1)] + 1.0) * stan::math::log(t[(i - 1)]))) - t[(i - 1)]),
        "assigning variable lp");}
    current_statement__ = 155;
    return sum(lp);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct gev_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>
operator()(const T0__& y, const T1__& mu, const T2__& sigma, const T3__& xi,
           std::ostream* pstream__)  const 
{
return gev_lpdf<propto__>(y, mu, sigma, xi, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>
gev_lcdf(const T0__& y_arg__, const T1__& mu_arg__, const T2__& sigma_arg__,
         const T3__& xi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  const auto& y = to_ref(y_arg__);
  const auto& mu = to_ref(mu_arg__);
  const auto& sigma = to_ref(sigma_arg__);
  const auto& xi = to_ref(xi_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 157;
    validate_non_negative_index("t", "rows(y)", rows(y));
    Eigen::Matrix<local_scalar_t__, -1, 1> t;
    t = Eigen::Matrix<local_scalar_t__, -1, 1>(rows(y));
    stan::math::fill(t, DUMMY_VAR__);
    
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 160;
    n = rows(y);
    current_statement__ = 163;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 161;
      assign(t, cons_list(index_uni(i), nil_index_list()),
        (logical_eq(xi[(i - 1)], 0) ?
           stan::math::exp(((mu[(i - 1)] - y[(i - 1)]) / sigma[(i - 1)])) :
           pow(
             (1.0 +
               (xi[(i - 1)] * ((y[(i - 1)] - mu[(i - 1)]) / sigma[(i - 1)]))),
             (-1.0 / xi[(i - 1)]))), "assigning variable t");}
    current_statement__ = 164;
    return -sum(t);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct gev_lcdf_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>
operator()(const T0__& y, const T1__& mu, const T2__& sigma, const T3__& xi,
           std::ostream* pstream__)  const 
{
return gev_lcdf(y, mu, sigma, xi, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
gev_cdf(const T0__& y, const T1__& mu, const T2__& sigma, const T3__& xi,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ t;
    t = DUMMY_VAR__;
    
    current_statement__ = 167;
    t = (logical_eq(xi, 0) ? stan::math::exp(((mu - y) / sigma)) :
           pow((1.0 + (xi * ((y - mu) / sigma))), (-1.0 / xi)));
    current_statement__ = 168;
    return stan::math::exp(-t);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct gev_cdf_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& y, const T1__& mu, const T2__& sigma, const T3__& xi,
           std::ostream* pstream__)  const 
{
return gev_cdf(y, mu, sigma, xi, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_TVGEVCensor final : public model_base_crtp<model_TVGEVCensor> {
private:
  int n_obs;
  int n_miss;
  int n_cens;
  Eigen::Matrix<double, -1, 1> y_obs;
  Eigen::Matrix<double, -1, 1> yL_cens;
  Eigen::Matrix<double, -1, 1> yU_cens;
  Eigen::Matrix<double, -1, 1> code_cens;
  int p_mu;
  int p_sigma;
  int p_xi;
  int cst_mu;
  int cst_sigma;
  int cst_xi;
  Eigen::Matrix<double, -1, -1> X_mu_obs;
  Eigen::Matrix<double, -1, -1> X_sigma_obs;
  Eigen::Matrix<double, -1, -1> X_xi_obs;
  Eigen::Matrix<double, -1, -1> X_mu_miss;
  Eigen::Matrix<double, -1, -1> X_sigma_miss;
  Eigen::Matrix<double, -1, -1> X_xi_miss;
  Eigen::Matrix<double, -1, -1> X_mu_cens;
  Eigen::Matrix<double, -1, -1> X_sigma_cens;
  Eigen::Matrix<double, -1, -1> X_xi_cens;
  Eigen::Matrix<double, -1, -1> cov_psi_mu;
  Eigen::Matrix<double, -1, -1> cov_psi_sigma;
  Eigen::Matrix<double, -1, -1> cov_psi_xi;
  Eigen::Matrix<double, -1, 1> mean_psi_mu;
  Eigen::Matrix<double, -1, 1> mean_psi_sigma;
  Eigen::Matrix<double, -1, 1> mean_psi_xi;
 
public:
  ~model_TVGEVCensor() { }
  
  inline std::string model_name() const final { return "model_TVGEVCensor"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_TVGEVCensor(stan::io::var_context& context__,
                    unsigned int random_seed__ = 0,
                    std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_TVGEVCensor_namespace::model_TVGEVCensor";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 82;
      context__.validate_dims("data initialization","n_obs","int",
          context__.to_vec());
      n_obs = std::numeric_limits<int>::min();
      
      current_statement__ = 82;
      n_obs = context__.vals_i("n_obs")[(1 - 1)];
      current_statement__ = 82;
      current_statement__ = 82;
      check_greater_or_equal(function__, "n_obs", n_obs, 0);
      current_statement__ = 83;
      context__.validate_dims("data initialization","n_miss","int",
          context__.to_vec());
      n_miss = std::numeric_limits<int>::min();
      
      current_statement__ = 83;
      n_miss = context__.vals_i("n_miss")[(1 - 1)];
      current_statement__ = 83;
      current_statement__ = 83;
      check_greater_or_equal(function__, "n_miss", n_miss, 0);
      current_statement__ = 84;
      context__.validate_dims("data initialization","n_cens","int",
          context__.to_vec());
      n_cens = std::numeric_limits<int>::min();
      
      current_statement__ = 84;
      n_cens = context__.vals_i("n_cens")[(1 - 1)];
      current_statement__ = 84;
      current_statement__ = 84;
      check_greater_or_equal(function__, "n_cens", n_cens, 0);
      current_statement__ = 85;
      validate_non_negative_index("y_obs", "n_obs", n_obs);
      current_statement__ = 86;
      context__.validate_dims("data initialization","y_obs","double",
          context__.to_vec(n_obs));
      y_obs = Eigen::Matrix<double, -1, 1>(n_obs);
      stan::math::fill(y_obs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_obs_flat__;
        current_statement__ = 86;
        assign(y_obs_flat__, nil_index_list(), context__.vals_r("y_obs"),
          "assigning variable y_obs_flat__");
        current_statement__ = 86;
        pos__ = 1;
        current_statement__ = 86;
        for (int sym1__ = 1; sym1__ <= n_obs; ++sym1__) {
          current_statement__ = 86;
          assign(y_obs, cons_list(index_uni(sym1__), nil_index_list()),
            y_obs_flat__[(pos__ - 1)], "assigning variable y_obs");
          current_statement__ = 86;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 87;
      validate_non_negative_index("yL_cens", "n_cens", n_cens);
      current_statement__ = 88;
      context__.validate_dims("data initialization","yL_cens","double",
          context__.to_vec(n_cens));
      yL_cens = Eigen::Matrix<double, -1, 1>(n_cens);
      stan::math::fill(yL_cens, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> yL_cens_flat__;
        current_statement__ = 88;
        assign(yL_cens_flat__, nil_index_list(), context__.vals_r("yL_cens"),
          "assigning variable yL_cens_flat__");
        current_statement__ = 88;
        pos__ = 1;
        current_statement__ = 88;
        for (int sym1__ = 1; sym1__ <= n_cens; ++sym1__) {
          current_statement__ = 88;
          assign(yL_cens, cons_list(index_uni(sym1__), nil_index_list()),
            yL_cens_flat__[(pos__ - 1)], "assigning variable yL_cens");
          current_statement__ = 88;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 89;
      validate_non_negative_index("yU_cens", "n_cens", n_cens);
      current_statement__ = 90;
      context__.validate_dims("data initialization","yU_cens","double",
          context__.to_vec(n_cens));
      yU_cens = Eigen::Matrix<double, -1, 1>(n_cens);
      stan::math::fill(yU_cens, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> yU_cens_flat__;
        current_statement__ = 90;
        assign(yU_cens_flat__, nil_index_list(), context__.vals_r("yU_cens"),
          "assigning variable yU_cens_flat__");
        current_statement__ = 90;
        pos__ = 1;
        current_statement__ = 90;
        for (int sym1__ = 1; sym1__ <= n_cens; ++sym1__) {
          current_statement__ = 90;
          assign(yU_cens, cons_list(index_uni(sym1__), nil_index_list()),
            yU_cens_flat__[(pos__ - 1)], "assigning variable yU_cens");
          current_statement__ = 90;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 91;
      validate_non_negative_index("code_cens", "n_cens", n_cens);
      current_statement__ = 92;
      context__.validate_dims("data initialization","code_cens","double",
          context__.to_vec(n_cens));
      code_cens = Eigen::Matrix<double, -1, 1>(n_cens);
      stan::math::fill(code_cens, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> code_cens_flat__;
        current_statement__ = 92;
        assign(code_cens_flat__, nil_index_list(),
          context__.vals_r("code_cens"),
          "assigning variable code_cens_flat__");
        current_statement__ = 92;
        pos__ = 1;
        current_statement__ = 92;
        for (int sym1__ = 1; sym1__ <= n_cens; ++sym1__) {
          current_statement__ = 92;
          assign(code_cens, cons_list(index_uni(sym1__), nil_index_list()),
            code_cens_flat__[(pos__ - 1)], "assigning variable code_cens");
          current_statement__ = 92;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 93;
      context__.validate_dims("data initialization","p_mu","int",
          context__.to_vec());
      p_mu = std::numeric_limits<int>::min();
      
      current_statement__ = 93;
      p_mu = context__.vals_i("p_mu")[(1 - 1)];
      current_statement__ = 93;
      current_statement__ = 93;
      check_greater_or_equal(function__, "p_mu", p_mu, 1);
      current_statement__ = 94;
      context__.validate_dims("data initialization","p_sigma","int",
          context__.to_vec());
      p_sigma = std::numeric_limits<int>::min();
      
      current_statement__ = 94;
      p_sigma = context__.vals_i("p_sigma")[(1 - 1)];
      current_statement__ = 94;
      current_statement__ = 94;
      check_greater_or_equal(function__, "p_sigma", p_sigma, 1);
      current_statement__ = 95;
      context__.validate_dims("data initialization","p_xi","int",
          context__.to_vec());
      p_xi = std::numeric_limits<int>::min();
      
      current_statement__ = 95;
      p_xi = context__.vals_i("p_xi")[(1 - 1)];
      current_statement__ = 95;
      current_statement__ = 95;
      check_greater_or_equal(function__, "p_xi", p_xi, 1);
      current_statement__ = 96;
      context__.validate_dims("data initialization","cst_mu","int",
          context__.to_vec());
      cst_mu = std::numeric_limits<int>::min();
      
      current_statement__ = 96;
      cst_mu = context__.vals_i("cst_mu")[(1 - 1)];
      current_statement__ = 96;
      current_statement__ = 96;
      check_greater_or_equal(function__, "cst_mu", cst_mu, 0);
      current_statement__ = 97;
      context__.validate_dims("data initialization","cst_sigma","int",
          context__.to_vec());
      cst_sigma = std::numeric_limits<int>::min();
      
      current_statement__ = 97;
      cst_sigma = context__.vals_i("cst_sigma")[(1 - 1)];
      current_statement__ = 97;
      current_statement__ = 97;
      check_greater_or_equal(function__, "cst_sigma", cst_sigma, 0);
      current_statement__ = 98;
      context__.validate_dims("data initialization","cst_xi","int",
          context__.to_vec());
      cst_xi = std::numeric_limits<int>::min();
      
      current_statement__ = 98;
      cst_xi = context__.vals_i("cst_xi")[(1 - 1)];
      current_statement__ = 98;
      current_statement__ = 98;
      check_greater_or_equal(function__, "cst_xi", cst_xi, 0);
      current_statement__ = 99;
      validate_non_negative_index("X_mu_obs", "n_obs", n_obs);
      current_statement__ = 100;
      validate_non_negative_index("X_mu_obs", "p_mu", p_mu);
      current_statement__ = 101;
      context__.validate_dims("data initialization","X_mu_obs","double",
          context__.to_vec(n_obs, p_mu));
      X_mu_obs = Eigen::Matrix<double, -1, -1>(n_obs, p_mu);
      stan::math::fill(X_mu_obs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_mu_obs_flat__;
        current_statement__ = 101;
        assign(X_mu_obs_flat__, nil_index_list(),
          context__.vals_r("X_mu_obs"), "assigning variable X_mu_obs_flat__");
        current_statement__ = 101;
        pos__ = 1;
        current_statement__ = 101;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 101;
          for (int sym2__ = 1; sym2__ <= n_obs; ++sym2__) {
            current_statement__ = 101;
            assign(X_mu_obs,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_mu_obs_flat__[(pos__ - 1)], "assigning variable X_mu_obs");
            current_statement__ = 101;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 102;
      validate_non_negative_index("X_sigma_obs", "n_obs", n_obs);
      current_statement__ = 103;
      validate_non_negative_index("X_sigma_obs", "p_sigma", p_sigma);
      current_statement__ = 104;
      context__.validate_dims("data initialization","X_sigma_obs","double",
          context__.to_vec(n_obs, p_sigma));
      X_sigma_obs = Eigen::Matrix<double, -1, -1>(n_obs, p_sigma);
      stan::math::fill(X_sigma_obs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_sigma_obs_flat__;
        current_statement__ = 104;
        assign(X_sigma_obs_flat__, nil_index_list(),
          context__.vals_r("X_sigma_obs"),
          "assigning variable X_sigma_obs_flat__");
        current_statement__ = 104;
        pos__ = 1;
        current_statement__ = 104;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 104;
          for (int sym2__ = 1; sym2__ <= n_obs; ++sym2__) {
            current_statement__ = 104;
            assign(X_sigma_obs,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_sigma_obs_flat__[(pos__ - 1)],
              "assigning variable X_sigma_obs");
            current_statement__ = 104;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 105;
      validate_non_negative_index("X_xi_obs", "n_obs", n_obs);
      current_statement__ = 106;
      validate_non_negative_index("X_xi_obs", "p_xi", p_xi);
      current_statement__ = 107;
      context__.validate_dims("data initialization","X_xi_obs","double",
          context__.to_vec(n_obs, p_xi));
      X_xi_obs = Eigen::Matrix<double, -1, -1>(n_obs, p_xi);
      stan::math::fill(X_xi_obs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_xi_obs_flat__;
        current_statement__ = 107;
        assign(X_xi_obs_flat__, nil_index_list(),
          context__.vals_r("X_xi_obs"), "assigning variable X_xi_obs_flat__");
        current_statement__ = 107;
        pos__ = 1;
        current_statement__ = 107;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 107;
          for (int sym2__ = 1; sym2__ <= n_obs; ++sym2__) {
            current_statement__ = 107;
            assign(X_xi_obs,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_xi_obs_flat__[(pos__ - 1)], "assigning variable X_xi_obs");
            current_statement__ = 107;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 108;
      validate_non_negative_index("X_mu_miss", "n_miss", n_miss);
      current_statement__ = 109;
      validate_non_negative_index("X_mu_miss", "p_mu", p_mu);
      current_statement__ = 110;
      context__.validate_dims("data initialization","X_mu_miss","double",
          context__.to_vec(n_miss, p_mu));
      X_mu_miss = Eigen::Matrix<double, -1, -1>(n_miss, p_mu);
      stan::math::fill(X_mu_miss, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_mu_miss_flat__;
        current_statement__ = 110;
        assign(X_mu_miss_flat__, nil_index_list(),
          context__.vals_r("X_mu_miss"),
          "assigning variable X_mu_miss_flat__");
        current_statement__ = 110;
        pos__ = 1;
        current_statement__ = 110;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 110;
          for (int sym2__ = 1; sym2__ <= n_miss; ++sym2__) {
            current_statement__ = 110;
            assign(X_mu_miss,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_mu_miss_flat__[(pos__ - 1)], "assigning variable X_mu_miss");
            current_statement__ = 110;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 111;
      validate_non_negative_index("X_sigma_miss", "n_miss", n_miss);
      current_statement__ = 112;
      validate_non_negative_index("X_sigma_miss", "p_sigma", p_sigma);
      current_statement__ = 113;
      context__.validate_dims("data initialization","X_sigma_miss","double",
          context__.to_vec(n_miss, p_sigma));
      X_sigma_miss = Eigen::Matrix<double, -1, -1>(n_miss, p_sigma);
      stan::math::fill(X_sigma_miss, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_sigma_miss_flat__;
        current_statement__ = 113;
        assign(X_sigma_miss_flat__, nil_index_list(),
          context__.vals_r("X_sigma_miss"),
          "assigning variable X_sigma_miss_flat__");
        current_statement__ = 113;
        pos__ = 1;
        current_statement__ = 113;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 113;
          for (int sym2__ = 1; sym2__ <= n_miss; ++sym2__) {
            current_statement__ = 113;
            assign(X_sigma_miss,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_sigma_miss_flat__[(pos__ - 1)],
              "assigning variable X_sigma_miss");
            current_statement__ = 113;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 114;
      validate_non_negative_index("X_xi_miss", "n_miss", n_miss);
      current_statement__ = 115;
      validate_non_negative_index("X_xi_miss", "p_xi", p_xi);
      current_statement__ = 116;
      context__.validate_dims("data initialization","X_xi_miss","double",
          context__.to_vec(n_miss, p_xi));
      X_xi_miss = Eigen::Matrix<double, -1, -1>(n_miss, p_xi);
      stan::math::fill(X_xi_miss, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_xi_miss_flat__;
        current_statement__ = 116;
        assign(X_xi_miss_flat__, nil_index_list(),
          context__.vals_r("X_xi_miss"),
          "assigning variable X_xi_miss_flat__");
        current_statement__ = 116;
        pos__ = 1;
        current_statement__ = 116;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 116;
          for (int sym2__ = 1; sym2__ <= n_miss; ++sym2__) {
            current_statement__ = 116;
            assign(X_xi_miss,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_xi_miss_flat__[(pos__ - 1)], "assigning variable X_xi_miss");
            current_statement__ = 116;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 117;
      validate_non_negative_index("X_mu_cens", "n_cens", n_cens);
      current_statement__ = 118;
      validate_non_negative_index("X_mu_cens", "p_mu", p_mu);
      current_statement__ = 119;
      context__.validate_dims("data initialization","X_mu_cens","double",
          context__.to_vec(n_cens, p_mu));
      X_mu_cens = Eigen::Matrix<double, -1, -1>(n_cens, p_mu);
      stan::math::fill(X_mu_cens, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_mu_cens_flat__;
        current_statement__ = 119;
        assign(X_mu_cens_flat__, nil_index_list(),
          context__.vals_r("X_mu_cens"),
          "assigning variable X_mu_cens_flat__");
        current_statement__ = 119;
        pos__ = 1;
        current_statement__ = 119;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 119;
          for (int sym2__ = 1; sym2__ <= n_cens; ++sym2__) {
            current_statement__ = 119;
            assign(X_mu_cens,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_mu_cens_flat__[(pos__ - 1)], "assigning variable X_mu_cens");
            current_statement__ = 119;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 120;
      validate_non_negative_index("X_sigma_cens", "n_cens", n_cens);
      current_statement__ = 121;
      validate_non_negative_index("X_sigma_cens", "p_sigma", p_sigma);
      current_statement__ = 122;
      context__.validate_dims("data initialization","X_sigma_cens","double",
          context__.to_vec(n_cens, p_sigma));
      X_sigma_cens = Eigen::Matrix<double, -1, -1>(n_cens, p_sigma);
      stan::math::fill(X_sigma_cens, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_sigma_cens_flat__;
        current_statement__ = 122;
        assign(X_sigma_cens_flat__, nil_index_list(),
          context__.vals_r("X_sigma_cens"),
          "assigning variable X_sigma_cens_flat__");
        current_statement__ = 122;
        pos__ = 1;
        current_statement__ = 122;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 122;
          for (int sym2__ = 1; sym2__ <= n_cens; ++sym2__) {
            current_statement__ = 122;
            assign(X_sigma_cens,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_sigma_cens_flat__[(pos__ - 1)],
              "assigning variable X_sigma_cens");
            current_statement__ = 122;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 123;
      validate_non_negative_index("X_xi_cens", "n_cens", n_cens);
      current_statement__ = 124;
      validate_non_negative_index("X_xi_cens", "p_xi", p_xi);
      current_statement__ = 125;
      context__.validate_dims("data initialization","X_xi_cens","double",
          context__.to_vec(n_cens, p_xi));
      X_xi_cens = Eigen::Matrix<double, -1, -1>(n_cens, p_xi);
      stan::math::fill(X_xi_cens, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_xi_cens_flat__;
        current_statement__ = 125;
        assign(X_xi_cens_flat__, nil_index_list(),
          context__.vals_r("X_xi_cens"),
          "assigning variable X_xi_cens_flat__");
        current_statement__ = 125;
        pos__ = 1;
        current_statement__ = 125;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 125;
          for (int sym2__ = 1; sym2__ <= n_cens; ++sym2__) {
            current_statement__ = 125;
            assign(X_xi_cens,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_xi_cens_flat__[(pos__ - 1)], "assigning variable X_xi_cens");
            current_statement__ = 125;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 126;
      validate_non_negative_index("cov_psi_mu", "p_mu", p_mu);
      current_statement__ = 127;
      validate_non_negative_index("cov_psi_mu", "p_mu", p_mu);
      current_statement__ = 128;
      context__.validate_dims("data initialization","cov_psi_mu","double",
          context__.to_vec(p_mu, p_mu));
      cov_psi_mu = Eigen::Matrix<double, -1, -1>(p_mu, p_mu);
      stan::math::fill(cov_psi_mu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> cov_psi_mu_flat__;
        current_statement__ = 128;
        assign(cov_psi_mu_flat__, nil_index_list(),
          context__.vals_r("cov_psi_mu"),
          "assigning variable cov_psi_mu_flat__");
        current_statement__ = 128;
        pos__ = 1;
        current_statement__ = 128;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 128;
          for (int sym2__ = 1; sym2__ <= p_mu; ++sym2__) {
            current_statement__ = 128;
            assign(cov_psi_mu,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              cov_psi_mu_flat__[(pos__ - 1)], "assigning variable cov_psi_mu");
            current_statement__ = 128;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 129;
      validate_non_negative_index("cov_psi_sigma", "p_sigma", p_sigma);
      current_statement__ = 130;
      validate_non_negative_index("cov_psi_sigma", "p_sigma", p_sigma);
      current_statement__ = 131;
      context__.validate_dims("data initialization","cov_psi_sigma","double",
          context__.to_vec(p_sigma, p_sigma));
      cov_psi_sigma = Eigen::Matrix<double, -1, -1>(p_sigma, p_sigma);
      stan::math::fill(cov_psi_sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> cov_psi_sigma_flat__;
        current_statement__ = 131;
        assign(cov_psi_sigma_flat__, nil_index_list(),
          context__.vals_r("cov_psi_sigma"),
          "assigning variable cov_psi_sigma_flat__");
        current_statement__ = 131;
        pos__ = 1;
        current_statement__ = 131;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 131;
          for (int sym2__ = 1; sym2__ <= p_sigma; ++sym2__) {
            current_statement__ = 131;
            assign(cov_psi_sigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              cov_psi_sigma_flat__[(pos__ - 1)],
              "assigning variable cov_psi_sigma");
            current_statement__ = 131;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 132;
      validate_non_negative_index("cov_psi_xi", "p_xi", p_xi);
      current_statement__ = 133;
      validate_non_negative_index("cov_psi_xi", "p_xi", p_xi);
      current_statement__ = 134;
      context__.validate_dims("data initialization","cov_psi_xi","double",
          context__.to_vec(p_xi, p_xi));
      cov_psi_xi = Eigen::Matrix<double, -1, -1>(p_xi, p_xi);
      stan::math::fill(cov_psi_xi, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> cov_psi_xi_flat__;
        current_statement__ = 134;
        assign(cov_psi_xi_flat__, nil_index_list(),
          context__.vals_r("cov_psi_xi"),
          "assigning variable cov_psi_xi_flat__");
        current_statement__ = 134;
        pos__ = 1;
        current_statement__ = 134;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 134;
          for (int sym2__ = 1; sym2__ <= p_xi; ++sym2__) {
            current_statement__ = 134;
            assign(cov_psi_xi,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              cov_psi_xi_flat__[(pos__ - 1)], "assigning variable cov_psi_xi");
            current_statement__ = 134;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 135;
      validate_non_negative_index("mean_psi_mu", "p_mu", p_mu);
      current_statement__ = 136;
      context__.validate_dims("data initialization","mean_psi_mu","double",
          context__.to_vec(p_mu));
      mean_psi_mu = Eigen::Matrix<double, -1, 1>(p_mu);
      stan::math::fill(mean_psi_mu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mean_psi_mu_flat__;
        current_statement__ = 136;
        assign(mean_psi_mu_flat__, nil_index_list(),
          context__.vals_r("mean_psi_mu"),
          "assigning variable mean_psi_mu_flat__");
        current_statement__ = 136;
        pos__ = 1;
        current_statement__ = 136;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 136;
          assign(mean_psi_mu, cons_list(index_uni(sym1__), nil_index_list()),
            mean_psi_mu_flat__[(pos__ - 1)], "assigning variable mean_psi_mu");
          current_statement__ = 136;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 137;
      validate_non_negative_index("mean_psi_sigma", "p_sigma", p_sigma);
      current_statement__ = 138;
      context__.validate_dims("data initialization","mean_psi_sigma",
          "double",context__.to_vec(p_sigma));
      mean_psi_sigma = Eigen::Matrix<double, -1, 1>(p_sigma);
      stan::math::fill(mean_psi_sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mean_psi_sigma_flat__;
        current_statement__ = 138;
        assign(mean_psi_sigma_flat__, nil_index_list(),
          context__.vals_r("mean_psi_sigma"),
          "assigning variable mean_psi_sigma_flat__");
        current_statement__ = 138;
        pos__ = 1;
        current_statement__ = 138;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 138;
          assign(mean_psi_sigma,
            cons_list(index_uni(sym1__), nil_index_list()),
            mean_psi_sigma_flat__[(pos__ - 1)],
            "assigning variable mean_psi_sigma");
          current_statement__ = 138;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 139;
      validate_non_negative_index("mean_psi_xi", "p_xi", p_xi);
      current_statement__ = 140;
      context__.validate_dims("data initialization","mean_psi_xi","double",
          context__.to_vec(p_xi));
      mean_psi_xi = Eigen::Matrix<double, -1, 1>(p_xi);
      stan::math::fill(mean_psi_xi, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mean_psi_xi_flat__;
        current_statement__ = 140;
        assign(mean_psi_xi_flat__, nil_index_list(),
          context__.vals_r("mean_psi_xi"),
          "assigning variable mean_psi_xi_flat__");
        current_statement__ = 140;
        pos__ = 1;
        current_statement__ = 140;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 140;
          assign(mean_psi_xi, cons_list(index_uni(sym1__), nil_index_list()),
            mean_psi_xi_flat__[(pos__ - 1)], "assigning variable mean_psi_xi");
          current_statement__ = 140;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 141;
      validate_non_negative_index("psi_mu", "p_mu", p_mu);
      current_statement__ = 142;
      validate_non_negative_index("psi_sigma", "p_sigma", p_sigma);
      current_statement__ = 143;
      validate_non_negative_index("psi_xi", "p_xi", p_xi);
      current_statement__ = 144;
      validate_non_negative_index("y_miss", "n_miss", n_miss);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += p_mu;
      num_params_r__ += p_sigma;
      num_params_r__ += p_xi;
      num_params_r__ += n_miss;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_TVGEVCensor_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> psi_mu;
      psi_mu = Eigen::Matrix<local_scalar_t__, -1, 1>(p_mu);
      stan::math::fill(psi_mu, DUMMY_VAR__);
      
      current_statement__ = 1;
      psi_mu = in__.vector(p_mu);
      Eigen::Matrix<local_scalar_t__, -1, 1> psi_sigma;
      psi_sigma = Eigen::Matrix<local_scalar_t__, -1, 1>(p_sigma);
      stan::math::fill(psi_sigma, DUMMY_VAR__);
      
      current_statement__ = 2;
      psi_sigma = in__.vector(p_sigma);
      Eigen::Matrix<local_scalar_t__, -1, 1> psi_xi;
      psi_xi = Eigen::Matrix<local_scalar_t__, -1, 1>(p_xi);
      stan::math::fill(psi_xi, DUMMY_VAR__);
      
      current_statement__ = 3;
      psi_xi = in__.vector(p_xi);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_miss;
      y_miss = Eigen::Matrix<local_scalar_t__, -1, 1>(n_miss);
      stan::math::fill(y_miss, DUMMY_VAR__);
      
      current_statement__ = 4;
      y_miss = in__.vector(n_miss);
      {
        current_statement__ = 5;
        validate_non_negative_index("mu_obs", "n_obs", n_obs);
        Eigen::Matrix<local_scalar_t__, -1, 1> mu_obs;
        mu_obs = Eigen::Matrix<local_scalar_t__, -1, 1>(n_obs);
        stan::math::fill(mu_obs, DUMMY_VAR__);
        
        current_statement__ = 7;
        validate_non_negative_index("sigma_obs", "n_obs", n_obs);
        Eigen::Matrix<local_scalar_t__, -1, 1> sigma_obs;
        sigma_obs = Eigen::Matrix<local_scalar_t__, -1, 1>(n_obs);
        stan::math::fill(sigma_obs, DUMMY_VAR__);
        
        current_statement__ = 9;
        validate_non_negative_index("xi_obs", "n_obs", n_obs);
        Eigen::Matrix<local_scalar_t__, -1, 1> xi_obs;
        xi_obs = Eigen::Matrix<local_scalar_t__, -1, 1>(n_obs);
        stan::math::fill(xi_obs, DUMMY_VAR__);
        
        current_statement__ = 11;
        validate_non_negative_index("mu_miss", "n_miss", n_miss);
        Eigen::Matrix<local_scalar_t__, -1, 1> mu_miss;
        mu_miss = Eigen::Matrix<local_scalar_t__, -1, 1>(n_miss);
        stan::math::fill(mu_miss, DUMMY_VAR__);
        
        current_statement__ = 13;
        validate_non_negative_index("sigma_miss", "n_miss", n_miss);
        Eigen::Matrix<local_scalar_t__, -1, 1> sigma_miss;
        sigma_miss = Eigen::Matrix<local_scalar_t__, -1, 1>(n_miss);
        stan::math::fill(sigma_miss, DUMMY_VAR__);
        
        current_statement__ = 15;
        validate_non_negative_index("xi_miss", "n_miss", n_miss);
        Eigen::Matrix<local_scalar_t__, -1, 1> xi_miss;
        xi_miss = Eigen::Matrix<local_scalar_t__, -1, 1>(n_miss);
        stan::math::fill(xi_miss, DUMMY_VAR__);
        
        current_statement__ = 17;
        validate_non_negative_index("mu_cens", "n_cens", n_cens);
        Eigen::Matrix<local_scalar_t__, -1, 1> mu_cens;
        mu_cens = Eigen::Matrix<local_scalar_t__, -1, 1>(n_cens);
        stan::math::fill(mu_cens, DUMMY_VAR__);
        
        current_statement__ = 19;
        validate_non_negative_index("sigma_cens", "n_cens", n_cens);
        Eigen::Matrix<local_scalar_t__, -1, 1> sigma_cens;
        sigma_cens = Eigen::Matrix<local_scalar_t__, -1, 1>(n_cens);
        stan::math::fill(sigma_cens, DUMMY_VAR__);
        
        current_statement__ = 21;
        validate_non_negative_index("xi_cens", "n_cens", n_cens);
        Eigen::Matrix<local_scalar_t__, -1, 1> xi_cens;
        xi_cens = Eigen::Matrix<local_scalar_t__, -1, 1>(n_cens);
        stan::math::fill(xi_cens, DUMMY_VAR__);
        
        current_statement__ = 23;
        lp_accum__.add(
          multi_normal_lpdf<propto__>(psi_mu, mean_psi_mu, cov_psi_mu));
        current_statement__ = 24;
        lp_accum__.add(
          multi_normal_lpdf<propto__>(psi_sigma, mean_psi_sigma,
            cov_psi_sigma));
        current_statement__ = 25;
        lp_accum__.add(
          multi_normal_lpdf<propto__>(psi_xi, mean_psi_xi, cov_psi_xi));
        current_statement__ = 39;
        if (cst_mu) {
          current_statement__ = 33;
          for (int i = 1; i <= n_obs; ++i) {
            current_statement__ = 32;
            assign(mu_obs, cons_list(index_uni(i), nil_index_list()),
              psi_mu[(1 - 1)], "assigning variable mu_obs");}
          current_statement__ = 35;
          for (int i = 1; i <= n_miss; ++i) {
            current_statement__ = 34;
            assign(mu_miss, cons_list(index_uni(i), nil_index_list()),
              psi_mu[(1 - 1)], "assigning variable mu_miss");}
          current_statement__ = 37;
          for (int i = 1; i <= n_cens; ++i) {
            current_statement__ = 36;
            assign(mu_cens, cons_list(index_uni(i), nil_index_list()),
              psi_mu[(1 - 1)], "assigning variable mu_cens");}
        } else {
          current_statement__ = 26;
          assign(mu_obs, nil_index_list(), multiply(X_mu_obs, psi_mu),
            "assigning variable mu_obs");
          current_statement__ = 28;
          if (n_miss) {
            current_statement__ = 27;
            assign(mu_miss, nil_index_list(), multiply(X_mu_miss, psi_mu),
              "assigning variable mu_miss");
          } 
          current_statement__ = 30;
          if (n_cens) {
            current_statement__ = 29;
            assign(mu_cens, nil_index_list(), multiply(X_mu_cens, psi_mu),
              "assigning variable mu_cens");
          } 
        }
        current_statement__ = 53;
        if (cst_sigma) {
          current_statement__ = 47;
          for (int i = 1; i <= n_obs; ++i) {
            current_statement__ = 46;
            assign(sigma_obs, cons_list(index_uni(i), nil_index_list()),
              psi_sigma[(1 - 1)], "assigning variable sigma_obs");}
          current_statement__ = 49;
          for (int i = 1; i <= n_miss; ++i) {
            current_statement__ = 48;
            assign(sigma_miss, cons_list(index_uni(i), nil_index_list()),
              psi_sigma[(1 - 1)], "assigning variable sigma_miss");}
          current_statement__ = 51;
          for (int i = 1; i <= n_cens; ++i) {
            current_statement__ = 50;
            assign(sigma_cens, cons_list(index_uni(i), nil_index_list()),
              psi_sigma[(1 - 1)], "assigning variable sigma_cens");}
        } else {
          current_statement__ = 40;
          assign(sigma_obs, nil_index_list(),
            multiply(X_sigma_obs, psi_sigma), "assigning variable sigma_obs");
          current_statement__ = 42;
          if (n_miss) {
            current_statement__ = 41;
            assign(sigma_miss, nil_index_list(),
              multiply(X_sigma_miss, psi_sigma),
              "assigning variable sigma_miss");
          } 
          current_statement__ = 44;
          if (n_cens) {
            current_statement__ = 43;
            assign(sigma_cens, nil_index_list(),
              multiply(X_sigma_cens, psi_mu), "assigning variable sigma_cens");
          } 
        }
        current_statement__ = 67;
        if (cst_xi) {
          current_statement__ = 61;
          for (int i = 1; i <= n_obs; ++i) {
            current_statement__ = 60;
            assign(xi_obs, cons_list(index_uni(i), nil_index_list()),
              psi_xi[(1 - 1)], "assigning variable xi_obs");}
          current_statement__ = 63;
          for (int i = 1; i <= n_miss; ++i) {
            current_statement__ = 62;
            assign(xi_miss, cons_list(index_uni(i), nil_index_list()),
              psi_xi[(1 - 1)], "assigning variable xi_miss");}
          current_statement__ = 65;
          for (int i = 1; i <= n_cens; ++i) {
            current_statement__ = 64;
            assign(xi_cens, cons_list(index_uni(i), nil_index_list()),
              psi_xi[(1 - 1)], "assigning variable xi_cens");}
        } else {
          current_statement__ = 54;
          assign(xi_obs, nil_index_list(), multiply(X_xi_obs, psi_xi),
            "assigning variable xi_obs");
          current_statement__ = 56;
          if (n_miss) {
            current_statement__ = 55;
            assign(xi_miss, nil_index_list(), multiply(X_xi_miss, psi_xi),
              "assigning variable xi_miss");
          } 
          current_statement__ = 58;
          if (n_cens) {
            current_statement__ = 57;
            assign(xi_cens, nil_index_list(), multiply(X_xi_cens, psi_xi),
              "assigning variable xi_cens");
          } 
        }
        current_statement__ = 68;
        lp_accum__.add(
          gev_lpdf<propto__>(y_obs, mu_obs, sigma_obs, xi_obs, pstream__));
        current_statement__ = 70;
        if (n_miss) {
          current_statement__ = 69;
          lp_accum__.add(
            gev_lpdf<propto__>(y_miss, mu_miss, sigma_miss,
              xi_miss, pstream__));
        } 
        current_statement__ = 81;
        for (int i = 1; i <= n_cens; ++i) {
          current_statement__ = 79;
          if (logical_eq(code_cens[(i - 1)], 1)) {
            current_statement__ = 77;
            lp_accum__.add(
              stan::math::log(
                (1.0 -
                  gev_cdf(yL_cens[(i - 1)], mu_cens[(i - 1)],
                    sigma_cens[(i - 1)], xi_cens[(i - 1)], pstream__))));
          } else {
            current_statement__ = 76;
            if (logical_eq(code_cens[(i - 1)], 2)) {
              current_statement__ = 74;
              lp_accum__.add(
                stan::math::log(
                  (gev_cdf(yU_cens[(i - 1)], mu_cens[(i - 1)],
                     sigma_cens[(i - 1)], xi_cens[(i - 1)], pstream__) -
                    gev_cdf(yL_cens[(i - 1)], mu_cens[(i - 1)],
                      sigma_cens[(i - 1)], xi_cens[(i - 1)], pstream__))));
            } else {
              current_statement__ = 73;
              if (logical_eq(code_cens[(i - 1)], 3)) {
                current_statement__ = 71;
                lp_accum__.add(
                  stan::math::log(
                    gev_cdf(yU_cens[(i - 1)], mu_cens[(i - 1)],
                      sigma_cens[(i - 1)], xi_cens[(i - 1)], pstream__)));
              } 
            }
          }}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_TVGEVCensor_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> psi_mu;
      psi_mu = Eigen::Matrix<double, -1, 1>(p_mu);
      stan::math::fill(psi_mu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      psi_mu = in__.vector(p_mu);
      Eigen::Matrix<double, -1, 1> psi_sigma;
      psi_sigma = Eigen::Matrix<double, -1, 1>(p_sigma);
      stan::math::fill(psi_sigma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      psi_sigma = in__.vector(p_sigma);
      Eigen::Matrix<double, -1, 1> psi_xi;
      psi_xi = Eigen::Matrix<double, -1, 1>(p_xi);
      stan::math::fill(psi_xi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      psi_xi = in__.vector(p_xi);
      Eigen::Matrix<double, -1, 1> y_miss;
      y_miss = Eigen::Matrix<double, -1, 1>(n_miss);
      stan::math::fill(y_miss, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      y_miss = in__.vector(n_miss);
      for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
        vars__.emplace_back(psi_mu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
        vars__.emplace_back(psi_sigma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
        vars__.emplace_back(psi_xi[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
        vars__.emplace_back(y_miss[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> psi_mu;
      psi_mu = Eigen::Matrix<double, -1, 1>(p_mu);
      stan::math::fill(psi_mu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> psi_mu_flat__;
        current_statement__ = 1;
        assign(psi_mu_flat__, nil_index_list(), context__.vals_r("psi_mu"),
          "assigning variable psi_mu_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 1;
          assign(psi_mu, cons_list(index_uni(sym1__), nil_index_list()),
            psi_mu_flat__[(pos__ - 1)], "assigning variable psi_mu");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> psi_sigma;
      psi_sigma = Eigen::Matrix<double, -1, 1>(p_sigma);
      stan::math::fill(psi_sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> psi_sigma_flat__;
        current_statement__ = 2;
        assign(psi_sigma_flat__, nil_index_list(),
          context__.vals_r("psi_sigma"),
          "assigning variable psi_sigma_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 2;
          assign(psi_sigma, cons_list(index_uni(sym1__), nil_index_list()),
            psi_sigma_flat__[(pos__ - 1)], "assigning variable psi_sigma");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> psi_xi;
      psi_xi = Eigen::Matrix<double, -1, 1>(p_xi);
      stan::math::fill(psi_xi, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> psi_xi_flat__;
        current_statement__ = 3;
        assign(psi_xi_flat__, nil_index_list(), context__.vals_r("psi_xi"),
          "assigning variable psi_xi_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 3;
          assign(psi_xi, cons_list(index_uni(sym1__), nil_index_list()),
            psi_xi_flat__[(pos__ - 1)], "assigning variable psi_xi");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> y_miss;
      y_miss = Eigen::Matrix<double, -1, 1>(n_miss);
      stan::math::fill(y_miss, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_miss_flat__;
        current_statement__ = 4;
        assign(y_miss_flat__, nil_index_list(), context__.vals_r("y_miss"),
          "assigning variable y_miss_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
          current_statement__ = 4;
          assign(y_miss, cons_list(index_uni(sym1__), nil_index_list()),
            y_miss_flat__[(pos__ - 1)], "assigning variable y_miss");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
        vars__.emplace_back(psi_mu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
        vars__.emplace_back(psi_sigma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
        vars__.emplace_back(psi_xi[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
        vars__.emplace_back(y_miss[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("psi_mu");
    names__.emplace_back("psi_sigma");
    names__.emplace_back("psi_xi");
    names__.emplace_back("y_miss");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(p_mu)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(p_sigma)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(p_xi)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_miss)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi_mu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi_sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi_xi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_miss" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi_mu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi_sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi_xi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_miss" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"psi_mu\",\"type\":{\"name\":\"vector\",\"length\":" << p_mu << "},\"block\":\"parameters\"},{\"name\":\"psi_sigma\",\"type\":{\"name\":\"vector\",\"length\":" << p_sigma << "},\"block\":\"parameters\"},{\"name\":\"psi_xi\",\"type\":{\"name\":\"vector\",\"length\":" << p_xi << "},\"block\":\"parameters\"},{\"name\":\"y_miss\",\"type\":{\"name\":\"vector\",\"length\":" << n_miss << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"psi_mu\",\"type\":{\"name\":\"vector\",\"length\":" << p_mu << "},\"block\":\"parameters\"},{\"name\":\"psi_sigma\",\"type\":{\"name\":\"vector\",\"length\":" << p_sigma << "},\"block\":\"parameters\"},{\"name\":\"psi_xi\",\"type\":{\"name\":\"vector\",\"length\":" << p_xi << "},\"block\":\"parameters\"},{\"name\":\"y_miss\",\"type\":{\"name\":\"vector\",\"length\":" << n_miss << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_TVGEVCensor_namespace::model_TVGEVCensor;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_TVGEVCensor_namespace::profiles__;
}
#endif
#endif
