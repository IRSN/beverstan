// Generated by rstantools.  Do not edit by hand.

/*
    beverstan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    beverstan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with beverstan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_TVGEVCensor_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 170> locations_array__ =
  {" (found before start of program)",
  " (in 'TVGEVCensor', line 89, column 2 to column 22)",
  " (in 'TVGEVCensor', line 90, column 2 to column 28)",
  " (in 'TVGEVCensor', line 91, column 2 to column 22)",
  " (in 'TVGEVCensor', line 92, column 2 to column 24)",
  " (in 'TVGEVCensor', line 97, column 9 to column 14)",
  " (in 'TVGEVCensor', line 97, column 2 to column 23)",
  " (in 'TVGEVCensor', line 98, column 9 to column 14)",
  " (in 'TVGEVCensor', line 98, column 2 to column 26)",
  " (in 'TVGEVCensor', line 99, column 9 to column 14)",
  " (in 'TVGEVCensor', line 99, column 2 to column 23)",
  " (in 'TVGEVCensor', line 100, column 9 to column 15)",
  " (in 'TVGEVCensor', line 100, column 2 to column 25)",
  " (in 'TVGEVCensor', line 101, column 9 to column 15)",
  " (in 'TVGEVCensor', line 101, column 2 to column 28)",
  " (in 'TVGEVCensor', line 102, column 9 to column 15)",
  " (in 'TVGEVCensor', line 102, column 2 to column 25)",
  " (in 'TVGEVCensor', line 104, column 9 to column 15)",
  " (in 'TVGEVCensor', line 104, column 2 to column 25)",
  " (in 'TVGEVCensor', line 105, column 9 to column 15)",
  " (in 'TVGEVCensor', line 105, column 2 to column 28)",
  " (in 'TVGEVCensor', line 106, column 9 to column 15)",
  " (in 'TVGEVCensor', line 106, column 2 to column 25)",
  " (in 'TVGEVCensor', line 109, column 2 to column 49)",
  " (in 'TVGEVCensor', line 110, column 2 to column 58)",
  " (in 'TVGEVCensor', line 111, column 2 to column 49)",
  " (in 'TVGEVCensor', line 118, column 4 to column 31)",
  " (in 'TVGEVCensor', line 119, column 16 to column 45)",
  " (in 'TVGEVCensor', line 119, column 4 to column 45)",
  " (in 'TVGEVCensor', line 120, column 16 to column 45)",
  " (in 'TVGEVCensor', line 120, column 4 to column 45)",
  " (in 'TVGEVCensor', line 117, column 9 to line 121, column 3)",
  " (in 'TVGEVCensor', line 114, column 23 to column 45)",
  " (in 'TVGEVCensor', line 114, column 4 to column 45)",
  " (in 'TVGEVCensor', line 115, column 24 to column 47)",
  " (in 'TVGEVCensor', line 115, column 4 to column 47)",
  " (in 'TVGEVCensor', line 116, column 24 to column 47)",
  " (in 'TVGEVCensor', line 116, column 4 to column 47)",
  " (in 'TVGEVCensor', line 113, column 14 to line 117, column 3)",
  " (in 'TVGEVCensor', line 113, column 2 to line 121, column 3)",
  " (in 'TVGEVCensor', line 128, column 4 to column 40)",
  " (in 'TVGEVCensor', line 129, column 16 to column 54)",
  " (in 'TVGEVCensor', line 129, column 4 to column 54)",
  " (in 'TVGEVCensor', line 130, column 16 to column 51)",
  " (in 'TVGEVCensor', line 130, column 4 to column 51)",
  " (in 'TVGEVCensor', line 127, column 9 to line 131, column 3)",
  " (in 'TVGEVCensor', line 124, column 23 to column 51)",
  " (in 'TVGEVCensor', line 124, column 4 to column 51)",
  " (in 'TVGEVCensor', line 125, column 24 to column 53)",
  " (in 'TVGEVCensor', line 125, column 4 to column 53)",
  " (in 'TVGEVCensor', line 126, column 24 to column 53)",
  " (in 'TVGEVCensor', line 126, column 4 to column 53)",
  " (in 'TVGEVCensor', line 123, column 17 to line 127, column 3)",
  " (in 'TVGEVCensor', line 123, column 2 to line 131, column 3)",
  " (in 'TVGEVCensor', line 138, column 4 to column 31)",
  " (in 'TVGEVCensor', line 139, column 16 to column 45)",
  " (in 'TVGEVCensor', line 139, column 4 to column 45)",
  " (in 'TVGEVCensor', line 140, column 16 to column 45)",
  " (in 'TVGEVCensor', line 140, column 4 to column 45)",
  " (in 'TVGEVCensor', line 137, column 9 to line 141, column 3)",
  " (in 'TVGEVCensor', line 134, column 23 to column 45)",
  " (in 'TVGEVCensor', line 134, column 4 to column 45)",
  " (in 'TVGEVCensor', line 135, column 24 to column 47)",
  " (in 'TVGEVCensor', line 135, column 4 to column 47)",
  " (in 'TVGEVCensor', line 136, column 24 to column 47)",
  " (in 'TVGEVCensor', line 136, column 4 to column 47)",
  " (in 'TVGEVCensor', line 133, column 14 to line 137, column 3)",
  " (in 'TVGEVCensor', line 133, column 2 to line 141, column 3)",
  " (in 'TVGEVCensor', line 144, column 2 to column 41)",
  " (in 'TVGEVCensor', line 145, column 14 to column 57)",
  " (in 'TVGEVCensor', line 145, column 2 to column 57)",
  " (in 'TVGEVCensor', line 154, column 6 to column 80)",
  " (in 'TVGEVCensor', line 153, column 34 to line 155, column 5)",
  " (in 'TVGEVCensor', line 153, column 11 to line 155, column 5)",
  " (in 'TVGEVCensor', line 151, column 6 to line 152, column 68)",
  " (in 'TVGEVCensor', line 150, column 34 to line 153, column 5)",
  " (in 'TVGEVCensor', line 150, column 11 to line 155, column 5)",
  " (in 'TVGEVCensor', line 149, column 6 to column 86)",
  " (in 'TVGEVCensor', line 148, column 27 to line 150, column 5)",
  " (in 'TVGEVCensor', line 148, column 4 to line 155, column 5)",
  " (in 'TVGEVCensor', line 147, column 22 to line 156, column 3)",
  " (in 'TVGEVCensor', line 147, column 2 to line 156, column 3)",
  " (in 'TVGEVCensor', line 40, column 2 to column 21)",
  " (in 'TVGEVCensor', line 41, column 2 to column 22)",
  " (in 'TVGEVCensor', line 42, column 2 to column 22)",
  " (in 'TVGEVCensor', line 44, column 9 to column 14)",
  " (in 'TVGEVCensor', line 44, column 2 to column 22)",
  " (in 'TVGEVCensor', line 45, column 9 to column 15)",
  " (in 'TVGEVCensor', line 45, column 2 to column 25)",
  " (in 'TVGEVCensor', line 46, column 9 to column 15)",
  " (in 'TVGEVCensor', line 46, column 2 to column 25)",
  " (in 'TVGEVCensor', line 47, column 9 to column 15)",
  " (in 'TVGEVCensor', line 47, column 2 to column 27)",
  " (in 'TVGEVCensor', line 50, column 2 to column 20)",
  " (in 'TVGEVCensor', line 51, column 2 to column 23)",
  " (in 'TVGEVCensor', line 52, column 2 to column 20)",
  " (in 'TVGEVCensor', line 55, column 2 to column 22)",
  " (in 'TVGEVCensor', line 56, column 2 to column 25)",
  " (in 'TVGEVCensor', line 57, column 2 to column 22)",
  " (in 'TVGEVCensor', line 60, column 9 to column 14)",
  " (in 'TVGEVCensor', line 60, column 16 to column 20)",
  " (in 'TVGEVCensor', line 60, column 2 to column 31)",
  " (in 'TVGEVCensor', line 61, column 9 to column 14)",
  " (in 'TVGEVCensor', line 61, column 16 to column 23)",
  " (in 'TVGEVCensor', line 61, column 2 to column 37)",
  " (in 'TVGEVCensor', line 62, column 9 to column 14)",
  " (in 'TVGEVCensor', line 62, column 16 to column 20)",
  " (in 'TVGEVCensor', line 62, column 2 to column 31)",
  " (in 'TVGEVCensor', line 64, column 9 to column 15)",
  " (in 'TVGEVCensor', line 64, column 17 to column 21)",
  " (in 'TVGEVCensor', line 64, column 2 to column 33)",
  " (in 'TVGEVCensor', line 65, column 9 to column 15)",
  " (in 'TVGEVCensor', line 65, column 17 to column 24)",
  " (in 'TVGEVCensor', line 65, column 2 to column 39)",
  " (in 'TVGEVCensor', line 66, column 9 to column 15)",
  " (in 'TVGEVCensor', line 66, column 17 to column 21)",
  " (in 'TVGEVCensor', line 66, column 2 to column 33)",
  " (in 'TVGEVCensor', line 69, column 9 to column 15)",
  " (in 'TVGEVCensor', line 69, column 17 to column 21)",
  " (in 'TVGEVCensor', line 69, column 2 to column 33)",
  " (in 'TVGEVCensor', line 70, column 9 to column 15)",
  " (in 'TVGEVCensor', line 70, column 17 to column 24)",
  " (in 'TVGEVCensor', line 70, column 2 to column 39)",
  " (in 'TVGEVCensor', line 71, column 9 to column 15)",
  " (in 'TVGEVCensor', line 71, column 17 to column 21)",
  " (in 'TVGEVCensor', line 71, column 2 to column 33)",
  " (in 'TVGEVCensor', line 74, column 9 to column 13)",
  " (in 'TVGEVCensor', line 74, column 15 to column 19)",
  " (in 'TVGEVCensor', line 74, column 2 to column 32)",
  " (in 'TVGEVCensor', line 75, column 9 to column 16)",
  " (in 'TVGEVCensor', line 75, column 18 to column 25)",
  " (in 'TVGEVCensor', line 75, column 2 to column 41)",
  " (in 'TVGEVCensor', line 76, column 9 to column 13)",
  " (in 'TVGEVCensor', line 76, column 15 to column 19)",
  " (in 'TVGEVCensor', line 76, column 2 to column 32)",
  " (in 'TVGEVCensor', line 79, column 9 to column 13)",
  " (in 'TVGEVCensor', line 79, column 2 to column 27)",
  " (in 'TVGEVCensor', line 80, column 9 to column 16)",
  " (in 'TVGEVCensor', line 80, column 2 to column 33)",
  " (in 'TVGEVCensor', line 81, column 9 to column 13)",
  " (in 'TVGEVCensor', line 81, column 2 to column 27)",
  " (in 'TVGEVCensor', line 89, column 9 to column 13)",
  " (in 'TVGEVCensor', line 90, column 9 to column 16)",
  " (in 'TVGEVCensor', line 91, column 9 to column 13)",
  " (in 'TVGEVCensor', line 92, column 9 to column 15)",
  " (in 'TVGEVCensor', line 7, column 11 to column 18)",
  " (in 'TVGEVCensor', line 7, column 4 to column 22)",
  " (in 'TVGEVCensor', line 8, column 11 to column 18)",
  " (in 'TVGEVCensor', line 8, column 4 to column 23)",
  " (in 'TVGEVCensor', line 9, column 4 to column 10)",
  " (in 'TVGEVCensor', line 10, column 4 to column 16)",
  " (in 'TVGEVCensor', line 12, column 6 to line 13, column 62)",
  " (in 'TVGEVCensor', line 14, column 6 to column 64)",
  " (in 'TVGEVCensor', line 11, column 17 to line 15, column 5)",
  " (in 'TVGEVCensor', line 11, column 4 to line 15, column 5)",
  " (in 'TVGEVCensor', line 16, column 4 to column 19)",
  " (in 'TVGEVCensor', line 6, column 62 to line 17, column 3)",
  " (in 'TVGEVCensor', line 20, column 11 to column 18)",
  " (in 'TVGEVCensor', line 20, column 4 to column 22)",
  " (in 'TVGEVCensor', line 21, column 4 to column 10)",
  " (in 'TVGEVCensor', line 22, column 4 to column 16)",
  " (in 'TVGEVCensor', line 24, column 6 to line 25, column 62)",
  " (in 'TVGEVCensor', line 23, column 17 to line 26, column 5)",
  " (in 'TVGEVCensor', line 23, column 4 to line 26, column 5)",
  " (in 'TVGEVCensor', line 27, column 4 to column 19)",
  " (in 'TVGEVCensor', line 19, column 62 to line 28, column 3)",
  " (in 'TVGEVCensor', line 31, column 4 to column 11)",
  " (in 'TVGEVCensor', line 32, column 4 to line 33, column 52)",
  " (in 'TVGEVCensor', line 34, column 4 to column 19)",
  " (in 'TVGEVCensor', line 30, column 53 to line 35, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, stan::base_type_t<T3__>>
gev_lpdf(const T0__& y_arg__, const T1__& mu_arg__, const T2__& sigma_arg__,
         const T3__& xi_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, stan::base_type_t<T3__>>
gev_lcdf(const T0__& y_arg__, const T1__& mu_arg__, const T2__& sigma_arg__,
         const T3__& xi_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__>
gev_cdf(const T0__& y, const T1__& mu, const T2__& sigma, const T3__& xi,
        std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, stan::base_type_t<T3__>>
gev_lpdf(const T0__& y_arg__, const T1__& mu_arg__, const T2__& sigma_arg__,
         const T3__& xi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  const auto& mu = stan::math::to_ref(mu_arg__);
  const auto& sigma = stan::math::to_ref(sigma_arg__);
  const auto& xi = stan::math::to_ref(xi_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 145;
    stan::math::validate_non_negative_index("t", "rows(y)",
      stan::math::rows(y));
    Eigen::Matrix<local_scalar_t__,-1,1> t =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(y),
        DUMMY_VAR__);
    current_statement__ = 147;
    stan::math::validate_non_negative_index("lp", "rows(y)",
      stan::math::rows(y));
    Eigen::Matrix<local_scalar_t__,-1,1> lp =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(y),
        DUMMY_VAR__);
    int n = std::numeric_limits<int>::min();
    current_statement__ = 150;
    n = stan::math::rows(y);
    current_statement__ = 154;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 151;
      stan::model::assign(t,
        (stan::math::logical_eq(
           stan::model::rvalue(xi, "xi", stan::model::index_uni(i)), 0) ? 
        stan::math::exp(
          ((stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) -
          stan::model::rvalue(y, "y", stan::model::index_uni(i))) /
          stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)))) : 
        stan::math::pow((1.0 +
          (stan::model::rvalue(xi, "xi", stan::model::index_uni(i)) *
          ((stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i))) /
          stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i))))),
          (-1.0 / stan::model::rvalue(xi, "xi", stan::model::index_uni(i))))),
        "assigning variable t", stan::model::index_uni(i));
      current_statement__ = 152;
      stan::model::assign(lp,
        ((-stan::math::log(
             stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)))
        + ((stan::model::rvalue(xi, "xi", stan::model::index_uni(i)) + 1.0) *
        stan::math::log(
          stan::model::rvalue(t, "t", stan::model::index_uni(i))))) -
        stan::model::rvalue(t, "t", stan::model::index_uni(i))),
        "assigning variable lp", stan::model::index_uni(i));
    }
    current_statement__ = 155;
    return stan::math::sum(lp);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, stan::base_type_t<T3__>>
gev_lcdf(const T0__& y_arg__, const T1__& mu_arg__, const T2__& sigma_arg__,
         const T3__& xi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  const auto& mu = stan::math::to_ref(mu_arg__);
  const auto& sigma = stan::math::to_ref(sigma_arg__);
  const auto& xi = stan::math::to_ref(xi_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 157;
    stan::math::validate_non_negative_index("t", "rows(y)",
      stan::math::rows(y));
    Eigen::Matrix<local_scalar_t__,-1,1> t =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(y),
        DUMMY_VAR__);
    int n = std::numeric_limits<int>::min();
    current_statement__ = 160;
    n = stan::math::rows(y);
    current_statement__ = 163;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 161;
      stan::model::assign(t,
        (stan::math::logical_eq(
           stan::model::rvalue(xi, "xi", stan::model::index_uni(i)), 0) ? 
        stan::math::exp(
          ((stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) -
          stan::model::rvalue(y, "y", stan::model::index_uni(i))) /
          stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)))) : 
        stan::math::pow((1.0 +
          (stan::model::rvalue(xi, "xi", stan::model::index_uni(i)) *
          ((stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i))) /
          stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i))))),
          (-1.0 / stan::model::rvalue(xi, "xi", stan::model::index_uni(i))))),
        "assigning variable t", stan::model::index_uni(i));
    }
    current_statement__ = 164;
    return -stan::math::sum(t);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
gev_cdf(const T0__& y, const T1__& mu, const T2__& sigma, const T3__& xi,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ t = DUMMY_VAR__;
    current_statement__ = 167;
    t = (stan::math::logical_eq(xi, 0) ? stan::math::exp(((mu - y) / sigma)) : 
      stan::math::pow((1.0 + (xi * ((y - mu) / sigma))), (-1.0 / xi)));
    current_statement__ = 168;
    return stan::math::exp(-t);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_TVGEVCensor final : public model_base_crtp<model_TVGEVCensor> {
private:
  int n_obs;
  int n_miss;
  int n_cens;
  Eigen::Matrix<double,-1,1> y_obs_data__;
  Eigen::Matrix<double,-1,1> yL_cens_data__;
  Eigen::Matrix<double,-1,1> yU_cens_data__;
  Eigen::Matrix<double,-1,1> code_cens_data__;
  int p_mu;
  int p_sigma;
  int p_xi;
  int cst_mu;
  int cst_sigma;
  int cst_xi;
  Eigen::Matrix<double,-1,-1> X_mu_obs_data__;
  Eigen::Matrix<double,-1,-1> X_sigma_obs_data__;
  Eigen::Matrix<double,-1,-1> X_xi_obs_data__;
  Eigen::Matrix<double,-1,-1> X_mu_miss_data__;
  Eigen::Matrix<double,-1,-1> X_sigma_miss_data__;
  Eigen::Matrix<double,-1,-1> X_xi_miss_data__;
  Eigen::Matrix<double,-1,-1> X_mu_cens_data__;
  Eigen::Matrix<double,-1,-1> X_sigma_cens_data__;
  Eigen::Matrix<double,-1,-1> X_xi_cens_data__;
  Eigen::Matrix<double,-1,-1> cov_psi_mu_data__;
  Eigen::Matrix<double,-1,-1> cov_psi_sigma_data__;
  Eigen::Matrix<double,-1,-1> cov_psi_xi_data__;
  Eigen::Matrix<double,-1,1> mean_psi_mu_data__;
  Eigen::Matrix<double,-1,1> mean_psi_sigma_data__;
  Eigen::Matrix<double,-1,1> mean_psi_xi_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y_obs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> yL_cens{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> yU_cens{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> code_cens{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_mu_obs{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_sigma_obs{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_xi_obs{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_mu_miss{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_sigma_miss{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_xi_miss{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_mu_cens{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_sigma_cens{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_xi_cens{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> cov_psi_mu{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> cov_psi_sigma{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> cov_psi_xi{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> mean_psi_mu{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> mean_psi_sigma{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> mean_psi_xi{nullptr, 0};
public:
  ~model_TVGEVCensor() {}
  model_TVGEVCensor(stan::io::var_context& context__, unsigned int
                    random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_TVGEVCensor_namespace::model_TVGEVCensor";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 82;
      context__.validate_dims("data initialization", "n_obs", "int",
        std::vector<size_t>{});
      n_obs = std::numeric_limits<int>::min();
      current_statement__ = 82;
      n_obs = context__.vals_i("n_obs")[(1 - 1)];
      current_statement__ = 82;
      stan::math::check_greater_or_equal(function__, "n_obs", n_obs, 0);
      current_statement__ = 83;
      context__.validate_dims("data initialization", "n_miss", "int",
        std::vector<size_t>{});
      n_miss = std::numeric_limits<int>::min();
      current_statement__ = 83;
      n_miss = context__.vals_i("n_miss")[(1 - 1)];
      current_statement__ = 83;
      stan::math::check_greater_or_equal(function__, "n_miss", n_miss, 0);
      current_statement__ = 84;
      context__.validate_dims("data initialization", "n_cens", "int",
        std::vector<size_t>{});
      n_cens = std::numeric_limits<int>::min();
      current_statement__ = 84;
      n_cens = context__.vals_i("n_cens")[(1 - 1)];
      current_statement__ = 84;
      stan::math::check_greater_or_equal(function__, "n_cens", n_cens, 0);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("y_obs", "n_obs", n_obs);
      current_statement__ = 86;
      context__.validate_dims("data initialization", "y_obs", "double",
        std::vector<size_t>{static_cast<size_t>(n_obs)});
      y_obs_data__ = Eigen::Matrix<double,-1,1>::Constant(n_obs,
                       std::numeric_limits<double>::quiet_NaN());
      new (&y_obs)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(y_obs_data__.data(), n_obs);
      {
        std::vector<local_scalar_t__> y_obs_flat__;
        current_statement__ = 86;
        y_obs_flat__ = context__.vals_r("y_obs");
        current_statement__ = 86;
        pos__ = 1;
        current_statement__ = 86;
        for (int sym1__ = 1; sym1__ <= n_obs; ++sym1__) {
          current_statement__ = 86;
          stan::model::assign(y_obs, y_obs_flat__[(pos__ - 1)],
            "assigning variable y_obs", stan::model::index_uni(sym1__));
          current_statement__ = 86;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 87;
      stan::math::validate_non_negative_index("yL_cens", "n_cens", n_cens);
      current_statement__ = 88;
      context__.validate_dims("data initialization", "yL_cens", "double",
        std::vector<size_t>{static_cast<size_t>(n_cens)});
      yL_cens_data__ = Eigen::Matrix<double,-1,1>::Constant(n_cens,
                         std::numeric_limits<double>::quiet_NaN());
      new (&yL_cens)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(yL_cens_data__.data(), n_cens);
      {
        std::vector<local_scalar_t__> yL_cens_flat__;
        current_statement__ = 88;
        yL_cens_flat__ = context__.vals_r("yL_cens");
        current_statement__ = 88;
        pos__ = 1;
        current_statement__ = 88;
        for (int sym1__ = 1; sym1__ <= n_cens; ++sym1__) {
          current_statement__ = 88;
          stan::model::assign(yL_cens, yL_cens_flat__[(pos__ - 1)],
            "assigning variable yL_cens", stan::model::index_uni(sym1__));
          current_statement__ = 88;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 89;
      stan::math::validate_non_negative_index("yU_cens", "n_cens", n_cens);
      current_statement__ = 90;
      context__.validate_dims("data initialization", "yU_cens", "double",
        std::vector<size_t>{static_cast<size_t>(n_cens)});
      yU_cens_data__ = Eigen::Matrix<double,-1,1>::Constant(n_cens,
                         std::numeric_limits<double>::quiet_NaN());
      new (&yU_cens)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(yU_cens_data__.data(), n_cens);
      {
        std::vector<local_scalar_t__> yU_cens_flat__;
        current_statement__ = 90;
        yU_cens_flat__ = context__.vals_r("yU_cens");
        current_statement__ = 90;
        pos__ = 1;
        current_statement__ = 90;
        for (int sym1__ = 1; sym1__ <= n_cens; ++sym1__) {
          current_statement__ = 90;
          stan::model::assign(yU_cens, yU_cens_flat__[(pos__ - 1)],
            "assigning variable yU_cens", stan::model::index_uni(sym1__));
          current_statement__ = 90;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 91;
      stan::math::validate_non_negative_index("code_cens", "n_cens", n_cens);
      current_statement__ = 92;
      context__.validate_dims("data initialization", "code_cens", "double",
        std::vector<size_t>{static_cast<size_t>(n_cens)});
      code_cens_data__ = Eigen::Matrix<double,-1,1>::Constant(n_cens,
                           std::numeric_limits<double>::quiet_NaN());
      new (&code_cens)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(code_cens_data__.data(),
        n_cens);
      {
        std::vector<local_scalar_t__> code_cens_flat__;
        current_statement__ = 92;
        code_cens_flat__ = context__.vals_r("code_cens");
        current_statement__ = 92;
        pos__ = 1;
        current_statement__ = 92;
        for (int sym1__ = 1; sym1__ <= n_cens; ++sym1__) {
          current_statement__ = 92;
          stan::model::assign(code_cens, code_cens_flat__[(pos__ - 1)],
            "assigning variable code_cens", stan::model::index_uni(sym1__));
          current_statement__ = 92;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 93;
      context__.validate_dims("data initialization", "p_mu", "int",
        std::vector<size_t>{});
      p_mu = std::numeric_limits<int>::min();
      current_statement__ = 93;
      p_mu = context__.vals_i("p_mu")[(1 - 1)];
      current_statement__ = 93;
      stan::math::check_greater_or_equal(function__, "p_mu", p_mu, 1);
      current_statement__ = 94;
      context__.validate_dims("data initialization", "p_sigma", "int",
        std::vector<size_t>{});
      p_sigma = std::numeric_limits<int>::min();
      current_statement__ = 94;
      p_sigma = context__.vals_i("p_sigma")[(1 - 1)];
      current_statement__ = 94;
      stan::math::check_greater_or_equal(function__, "p_sigma", p_sigma, 1);
      current_statement__ = 95;
      context__.validate_dims("data initialization", "p_xi", "int",
        std::vector<size_t>{});
      p_xi = std::numeric_limits<int>::min();
      current_statement__ = 95;
      p_xi = context__.vals_i("p_xi")[(1 - 1)];
      current_statement__ = 95;
      stan::math::check_greater_or_equal(function__, "p_xi", p_xi, 1);
      current_statement__ = 96;
      context__.validate_dims("data initialization", "cst_mu", "int",
        std::vector<size_t>{});
      cst_mu = std::numeric_limits<int>::min();
      current_statement__ = 96;
      cst_mu = context__.vals_i("cst_mu")[(1 - 1)];
      current_statement__ = 96;
      stan::math::check_greater_or_equal(function__, "cst_mu", cst_mu, 0);
      current_statement__ = 97;
      context__.validate_dims("data initialization", "cst_sigma", "int",
        std::vector<size_t>{});
      cst_sigma = std::numeric_limits<int>::min();
      current_statement__ = 97;
      cst_sigma = context__.vals_i("cst_sigma")[(1 - 1)];
      current_statement__ = 97;
      stan::math::check_greater_or_equal(function__, "cst_sigma", cst_sigma,
        0);
      current_statement__ = 98;
      context__.validate_dims("data initialization", "cst_xi", "int",
        std::vector<size_t>{});
      cst_xi = std::numeric_limits<int>::min();
      current_statement__ = 98;
      cst_xi = context__.vals_i("cst_xi")[(1 - 1)];
      current_statement__ = 98;
      stan::math::check_greater_or_equal(function__, "cst_xi", cst_xi, 0);
      current_statement__ = 99;
      stan::math::validate_non_negative_index("X_mu_obs", "n_obs", n_obs);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("X_mu_obs", "p_mu", p_mu);
      current_statement__ = 101;
      context__.validate_dims("data initialization", "X_mu_obs", "double",
        std::vector<size_t>{static_cast<size_t>(n_obs),
          static_cast<size_t>(p_mu)});
      X_mu_obs_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_obs, p_mu,
                          std::numeric_limits<double>::quiet_NaN());
      new (&X_mu_obs)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_mu_obs_data__.data(),
        n_obs, p_mu);
      {
        std::vector<local_scalar_t__> X_mu_obs_flat__;
        current_statement__ = 101;
        X_mu_obs_flat__ = context__.vals_r("X_mu_obs");
        current_statement__ = 101;
        pos__ = 1;
        current_statement__ = 101;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 101;
          for (int sym2__ = 1; sym2__ <= n_obs; ++sym2__) {
            current_statement__ = 101;
            stan::model::assign(X_mu_obs, X_mu_obs_flat__[(pos__ - 1)],
              "assigning variable X_mu_obs", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 101;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 102;
      stan::math::validate_non_negative_index("X_sigma_obs", "n_obs", n_obs);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("X_sigma_obs", "p_sigma",
        p_sigma);
      current_statement__ = 104;
      context__.validate_dims("data initialization", "X_sigma_obs", "double",
        std::vector<size_t>{static_cast<size_t>(n_obs),
          static_cast<size_t>(p_sigma)});
      X_sigma_obs_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_obs,
                             p_sigma,
                             std::numeric_limits<double>::quiet_NaN());
      new (&X_sigma_obs)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_sigma_obs_data__.data(),
        n_obs, p_sigma);
      {
        std::vector<local_scalar_t__> X_sigma_obs_flat__;
        current_statement__ = 104;
        X_sigma_obs_flat__ = context__.vals_r("X_sigma_obs");
        current_statement__ = 104;
        pos__ = 1;
        current_statement__ = 104;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 104;
          for (int sym2__ = 1; sym2__ <= n_obs; ++sym2__) {
            current_statement__ = 104;
            stan::model::assign(X_sigma_obs, X_sigma_obs_flat__[(pos__ - 1)],
              "assigning variable X_sigma_obs",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 104;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 105;
      stan::math::validate_non_negative_index("X_xi_obs", "n_obs", n_obs);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("X_xi_obs", "p_xi", p_xi);
      current_statement__ = 107;
      context__.validate_dims("data initialization", "X_xi_obs", "double",
        std::vector<size_t>{static_cast<size_t>(n_obs),
          static_cast<size_t>(p_xi)});
      X_xi_obs_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_obs, p_xi,
                          std::numeric_limits<double>::quiet_NaN());
      new (&X_xi_obs)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_xi_obs_data__.data(),
        n_obs, p_xi);
      {
        std::vector<local_scalar_t__> X_xi_obs_flat__;
        current_statement__ = 107;
        X_xi_obs_flat__ = context__.vals_r("X_xi_obs");
        current_statement__ = 107;
        pos__ = 1;
        current_statement__ = 107;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 107;
          for (int sym2__ = 1; sym2__ <= n_obs; ++sym2__) {
            current_statement__ = 107;
            stan::model::assign(X_xi_obs, X_xi_obs_flat__[(pos__ - 1)],
              "assigning variable X_xi_obs", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 107;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 108;
      stan::math::validate_non_negative_index("X_mu_miss", "n_miss", n_miss);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("X_mu_miss", "p_mu", p_mu);
      current_statement__ = 110;
      context__.validate_dims("data initialization", "X_mu_miss", "double",
        std::vector<size_t>{static_cast<size_t>(n_miss),
          static_cast<size_t>(p_mu)});
      X_mu_miss_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_miss, p_mu,
                           std::numeric_limits<double>::quiet_NaN());
      new (&X_mu_miss)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_mu_miss_data__.data(),
        n_miss, p_mu);
      {
        std::vector<local_scalar_t__> X_mu_miss_flat__;
        current_statement__ = 110;
        X_mu_miss_flat__ = context__.vals_r("X_mu_miss");
        current_statement__ = 110;
        pos__ = 1;
        current_statement__ = 110;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 110;
          for (int sym2__ = 1; sym2__ <= n_miss; ++sym2__) {
            current_statement__ = 110;
            stan::model::assign(X_mu_miss, X_mu_miss_flat__[(pos__ - 1)],
              "assigning variable X_mu_miss", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 110;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 111;
      stan::math::validate_non_negative_index("X_sigma_miss", "n_miss",
        n_miss);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("X_sigma_miss", "p_sigma",
        p_sigma);
      current_statement__ = 113;
      context__.validate_dims("data initialization", "X_sigma_miss",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_miss),
          static_cast<size_t>(p_sigma)});
      X_sigma_miss_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_miss,
                              p_sigma,
                              std::numeric_limits<double>::quiet_NaN());
      new (&X_sigma_miss)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_sigma_miss_data__.data(),
        n_miss, p_sigma);
      {
        std::vector<local_scalar_t__> X_sigma_miss_flat__;
        current_statement__ = 113;
        X_sigma_miss_flat__ = context__.vals_r("X_sigma_miss");
        current_statement__ = 113;
        pos__ = 1;
        current_statement__ = 113;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 113;
          for (int sym2__ = 1; sym2__ <= n_miss; ++sym2__) {
            current_statement__ = 113;
            stan::model::assign(X_sigma_miss, X_sigma_miss_flat__[(pos__ -
              1)], "assigning variable X_sigma_miss",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 113;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 114;
      stan::math::validate_non_negative_index("X_xi_miss", "n_miss", n_miss);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("X_xi_miss", "p_xi", p_xi);
      current_statement__ = 116;
      context__.validate_dims("data initialization", "X_xi_miss", "double",
        std::vector<size_t>{static_cast<size_t>(n_miss),
          static_cast<size_t>(p_xi)});
      X_xi_miss_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_miss, p_xi,
                           std::numeric_limits<double>::quiet_NaN());
      new (&X_xi_miss)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_xi_miss_data__.data(),
        n_miss, p_xi);
      {
        std::vector<local_scalar_t__> X_xi_miss_flat__;
        current_statement__ = 116;
        X_xi_miss_flat__ = context__.vals_r("X_xi_miss");
        current_statement__ = 116;
        pos__ = 1;
        current_statement__ = 116;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 116;
          for (int sym2__ = 1; sym2__ <= n_miss; ++sym2__) {
            current_statement__ = 116;
            stan::model::assign(X_xi_miss, X_xi_miss_flat__[(pos__ - 1)],
              "assigning variable X_xi_miss", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 116;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 117;
      stan::math::validate_non_negative_index("X_mu_cens", "n_cens", n_cens);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("X_mu_cens", "p_mu", p_mu);
      current_statement__ = 119;
      context__.validate_dims("data initialization", "X_mu_cens", "double",
        std::vector<size_t>{static_cast<size_t>(n_cens),
          static_cast<size_t>(p_mu)});
      X_mu_cens_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_cens, p_mu,
                           std::numeric_limits<double>::quiet_NaN());
      new (&X_mu_cens)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_mu_cens_data__.data(),
        n_cens, p_mu);
      {
        std::vector<local_scalar_t__> X_mu_cens_flat__;
        current_statement__ = 119;
        X_mu_cens_flat__ = context__.vals_r("X_mu_cens");
        current_statement__ = 119;
        pos__ = 1;
        current_statement__ = 119;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 119;
          for (int sym2__ = 1; sym2__ <= n_cens; ++sym2__) {
            current_statement__ = 119;
            stan::model::assign(X_mu_cens, X_mu_cens_flat__[(pos__ - 1)],
              "assigning variable X_mu_cens", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 119;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 120;
      stan::math::validate_non_negative_index("X_sigma_cens", "n_cens",
        n_cens);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("X_sigma_cens", "p_sigma",
        p_sigma);
      current_statement__ = 122;
      context__.validate_dims("data initialization", "X_sigma_cens",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_cens),
          static_cast<size_t>(p_sigma)});
      X_sigma_cens_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_cens,
                              p_sigma,
                              std::numeric_limits<double>::quiet_NaN());
      new (&X_sigma_cens)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_sigma_cens_data__.data(),
        n_cens, p_sigma);
      {
        std::vector<local_scalar_t__> X_sigma_cens_flat__;
        current_statement__ = 122;
        X_sigma_cens_flat__ = context__.vals_r("X_sigma_cens");
        current_statement__ = 122;
        pos__ = 1;
        current_statement__ = 122;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 122;
          for (int sym2__ = 1; sym2__ <= n_cens; ++sym2__) {
            current_statement__ = 122;
            stan::model::assign(X_sigma_cens, X_sigma_cens_flat__[(pos__ -
              1)], "assigning variable X_sigma_cens",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 122;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 123;
      stan::math::validate_non_negative_index("X_xi_cens", "n_cens", n_cens);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("X_xi_cens", "p_xi", p_xi);
      current_statement__ = 125;
      context__.validate_dims("data initialization", "X_xi_cens", "double",
        std::vector<size_t>{static_cast<size_t>(n_cens),
          static_cast<size_t>(p_xi)});
      X_xi_cens_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_cens, p_xi,
                           std::numeric_limits<double>::quiet_NaN());
      new (&X_xi_cens)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_xi_cens_data__.data(),
        n_cens, p_xi);
      {
        std::vector<local_scalar_t__> X_xi_cens_flat__;
        current_statement__ = 125;
        X_xi_cens_flat__ = context__.vals_r("X_xi_cens");
        current_statement__ = 125;
        pos__ = 1;
        current_statement__ = 125;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 125;
          for (int sym2__ = 1; sym2__ <= n_cens; ++sym2__) {
            current_statement__ = 125;
            stan::model::assign(X_xi_cens, X_xi_cens_flat__[(pos__ - 1)],
              "assigning variable X_xi_cens", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 125;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 126;
      stan::math::validate_non_negative_index("cov_psi_mu", "p_mu", p_mu);
      current_statement__ = 127;
      stan::math::validate_non_negative_index("cov_psi_mu", "p_mu", p_mu);
      current_statement__ = 128;
      context__.validate_dims("data initialization", "cov_psi_mu", "double",
        std::vector<size_t>{static_cast<size_t>(p_mu),
          static_cast<size_t>(p_mu)});
      cov_psi_mu_data__ = Eigen::Matrix<double,-1,-1>::Constant(p_mu, p_mu,
                            std::numeric_limits<double>::quiet_NaN());
      new (&cov_psi_mu)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(cov_psi_mu_data__.data(),
        p_mu, p_mu);
      {
        std::vector<local_scalar_t__> cov_psi_mu_flat__;
        current_statement__ = 128;
        cov_psi_mu_flat__ = context__.vals_r("cov_psi_mu");
        current_statement__ = 128;
        pos__ = 1;
        current_statement__ = 128;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 128;
          for (int sym2__ = 1; sym2__ <= p_mu; ++sym2__) {
            current_statement__ = 128;
            stan::model::assign(cov_psi_mu, cov_psi_mu_flat__[(pos__ - 1)],
              "assigning variable cov_psi_mu",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 128;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 129;
      stan::math::validate_non_negative_index("cov_psi_sigma", "p_sigma",
        p_sigma);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("cov_psi_sigma", "p_sigma",
        p_sigma);
      current_statement__ = 131;
      context__.validate_dims("data initialization", "cov_psi_sigma",
        "double",
        std::vector<size_t>{static_cast<size_t>(p_sigma),
          static_cast<size_t>(p_sigma)});
      cov_psi_sigma_data__ = Eigen::Matrix<double,-1,-1>::Constant(p_sigma,
                               p_sigma,
                               std::numeric_limits<double>::quiet_NaN());
      new (&cov_psi_sigma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(cov_psi_sigma_data__.data(),
        p_sigma, p_sigma);
      {
        std::vector<local_scalar_t__> cov_psi_sigma_flat__;
        current_statement__ = 131;
        cov_psi_sigma_flat__ = context__.vals_r("cov_psi_sigma");
        current_statement__ = 131;
        pos__ = 1;
        current_statement__ = 131;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 131;
          for (int sym2__ = 1; sym2__ <= p_sigma; ++sym2__) {
            current_statement__ = 131;
            stan::model::assign(cov_psi_sigma, cov_psi_sigma_flat__[(pos__ -
              1)], "assigning variable cov_psi_sigma",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 131;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 132;
      stan::math::validate_non_negative_index("cov_psi_xi", "p_xi", p_xi);
      current_statement__ = 133;
      stan::math::validate_non_negative_index("cov_psi_xi", "p_xi", p_xi);
      current_statement__ = 134;
      context__.validate_dims("data initialization", "cov_psi_xi", "double",
        std::vector<size_t>{static_cast<size_t>(p_xi),
          static_cast<size_t>(p_xi)});
      cov_psi_xi_data__ = Eigen::Matrix<double,-1,-1>::Constant(p_xi, p_xi,
                            std::numeric_limits<double>::quiet_NaN());
      new (&cov_psi_xi)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(cov_psi_xi_data__.data(),
        p_xi, p_xi);
      {
        std::vector<local_scalar_t__> cov_psi_xi_flat__;
        current_statement__ = 134;
        cov_psi_xi_flat__ = context__.vals_r("cov_psi_xi");
        current_statement__ = 134;
        pos__ = 1;
        current_statement__ = 134;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 134;
          for (int sym2__ = 1; sym2__ <= p_xi; ++sym2__) {
            current_statement__ = 134;
            stan::model::assign(cov_psi_xi, cov_psi_xi_flat__[(pos__ - 1)],
              "assigning variable cov_psi_xi",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 134;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 135;
      stan::math::validate_non_negative_index("mean_psi_mu", "p_mu", p_mu);
      current_statement__ = 136;
      context__.validate_dims("data initialization", "mean_psi_mu", "double",
        std::vector<size_t>{static_cast<size_t>(p_mu)});
      mean_psi_mu_data__ = Eigen::Matrix<double,-1,1>::Constant(p_mu,
                             std::numeric_limits<double>::quiet_NaN());
      new (&mean_psi_mu)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(mean_psi_mu_data__.data(),
        p_mu);
      {
        std::vector<local_scalar_t__> mean_psi_mu_flat__;
        current_statement__ = 136;
        mean_psi_mu_flat__ = context__.vals_r("mean_psi_mu");
        current_statement__ = 136;
        pos__ = 1;
        current_statement__ = 136;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 136;
          stan::model::assign(mean_psi_mu, mean_psi_mu_flat__[(pos__ - 1)],
            "assigning variable mean_psi_mu", stan::model::index_uni(sym1__));
          current_statement__ = 136;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 137;
      stan::math::validate_non_negative_index("mean_psi_sigma", "p_sigma",
        p_sigma);
      current_statement__ = 138;
      context__.validate_dims("data initialization", "mean_psi_sigma",
        "double", std::vector<size_t>{static_cast<size_t>(p_sigma)});
      mean_psi_sigma_data__ = Eigen::Matrix<double,-1,1>::Constant(p_sigma,
                                std::numeric_limits<double>::quiet_NaN());
      new (&mean_psi_sigma)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(mean_psi_sigma_data__.data(),
        p_sigma);
      {
        std::vector<local_scalar_t__> mean_psi_sigma_flat__;
        current_statement__ = 138;
        mean_psi_sigma_flat__ = context__.vals_r("mean_psi_sigma");
        current_statement__ = 138;
        pos__ = 1;
        current_statement__ = 138;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 138;
          stan::model::assign(mean_psi_sigma, mean_psi_sigma_flat__[(pos__ -
            1)], "assigning variable mean_psi_sigma",
            stan::model::index_uni(sym1__));
          current_statement__ = 138;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 139;
      stan::math::validate_non_negative_index("mean_psi_xi", "p_xi", p_xi);
      current_statement__ = 140;
      context__.validate_dims("data initialization", "mean_psi_xi", "double",
        std::vector<size_t>{static_cast<size_t>(p_xi)});
      mean_psi_xi_data__ = Eigen::Matrix<double,-1,1>::Constant(p_xi,
                             std::numeric_limits<double>::quiet_NaN());
      new (&mean_psi_xi)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(mean_psi_xi_data__.data(),
        p_xi);
      {
        std::vector<local_scalar_t__> mean_psi_xi_flat__;
        current_statement__ = 140;
        mean_psi_xi_flat__ = context__.vals_r("mean_psi_xi");
        current_statement__ = 140;
        pos__ = 1;
        current_statement__ = 140;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 140;
          stan::model::assign(mean_psi_xi, mean_psi_xi_flat__[(pos__ - 1)],
            "assigning variable mean_psi_xi", stan::model::index_uni(sym1__));
          current_statement__ = 140;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 141;
      stan::math::validate_non_negative_index("psi_mu", "p_mu", p_mu);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("psi_sigma", "p_sigma", p_sigma);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("psi_xi", "p_xi", p_xi);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("y_miss", "n_miss", n_miss);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = p_mu + p_sigma + p_xi + n_miss;
  }
  inline std::string model_name() const final {
    return "model_TVGEVCensor";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_TVGEVCensor_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> psi_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_mu, DUMMY_VAR__);
      current_statement__ = 1;
      psi_mu = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p_mu);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_sigma, DUMMY_VAR__);
      current_statement__ = 2;
      psi_sigma = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(p_sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_xi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_xi, DUMMY_VAR__);
      current_statement__ = 3;
      psi_xi = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p_xi);
      Eigen::Matrix<local_scalar_t__,-1,1> y_miss =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_miss, DUMMY_VAR__);
      current_statement__ = 4;
      y_miss = in__.template read<
                 Eigen::Matrix<local_scalar_t__,-1,1>>(n_miss);
      {
        current_statement__ = 5;
        stan::math::validate_non_negative_index("mu_obs", "n_obs", n_obs);
        Eigen::Matrix<local_scalar_t__,-1,1> mu_obs =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_obs, DUMMY_VAR__);
        current_statement__ = 7;
        stan::math::validate_non_negative_index("sigma_obs", "n_obs", n_obs);
        Eigen::Matrix<local_scalar_t__,-1,1> sigma_obs =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_obs, DUMMY_VAR__);
        current_statement__ = 9;
        stan::math::validate_non_negative_index("xi_obs", "n_obs", n_obs);
        Eigen::Matrix<local_scalar_t__,-1,1> xi_obs =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_obs, DUMMY_VAR__);
        current_statement__ = 11;
        stan::math::validate_non_negative_index("mu_miss", "n_miss", n_miss);
        Eigen::Matrix<local_scalar_t__,-1,1> mu_miss =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_miss, DUMMY_VAR__);
        current_statement__ = 13;
        stan::math::validate_non_negative_index("sigma_miss", "n_miss",
          n_miss);
        Eigen::Matrix<local_scalar_t__,-1,1> sigma_miss =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_miss, DUMMY_VAR__);
        current_statement__ = 15;
        stan::math::validate_non_negative_index("xi_miss", "n_miss", n_miss);
        Eigen::Matrix<local_scalar_t__,-1,1> xi_miss =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_miss, DUMMY_VAR__);
        current_statement__ = 17;
        stan::math::validate_non_negative_index("mu_cens", "n_cens", n_cens);
        Eigen::Matrix<local_scalar_t__,-1,1> mu_cens =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_cens, DUMMY_VAR__);
        current_statement__ = 19;
        stan::math::validate_non_negative_index("sigma_cens", "n_cens",
          n_cens);
        Eigen::Matrix<local_scalar_t__,-1,1> sigma_cens =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_cens, DUMMY_VAR__);
        current_statement__ = 21;
        stan::math::validate_non_negative_index("xi_cens", "n_cens", n_cens);
        Eigen::Matrix<local_scalar_t__,-1,1> xi_cens =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_cens, DUMMY_VAR__);
        current_statement__ = 23;
        lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(psi_mu,
                         mean_psi_mu, cov_psi_mu));
        current_statement__ = 24;
        lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(psi_sigma,
                         mean_psi_sigma, cov_psi_sigma));
        current_statement__ = 25;
        lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(psi_xi,
                         mean_psi_xi, cov_psi_xi));
        current_statement__ = 39;
        if (cst_mu) {
          current_statement__ = 33;
          for (int i = 1; i <= n_obs; ++i) {
            current_statement__ = 32;
            stan::model::assign(mu_obs,
              stan::model::rvalue(psi_mu, "psi_mu", stan::model::index_uni(1)),
              "assigning variable mu_obs", stan::model::index_uni(i));
          }
          current_statement__ = 35;
          for (int i = 1; i <= n_miss; ++i) {
            current_statement__ = 34;
            stan::model::assign(mu_miss,
              stan::model::rvalue(psi_mu, "psi_mu", stan::model::index_uni(1)),
              "assigning variable mu_miss", stan::model::index_uni(i));
          }
          current_statement__ = 37;
          for (int i = 1; i <= n_cens; ++i) {
            current_statement__ = 36;
            stan::model::assign(mu_cens,
              stan::model::rvalue(psi_mu, "psi_mu", stan::model::index_uni(1)),
              "assigning variable mu_cens", stan::model::index_uni(i));
          }
        } else {
          current_statement__ = 26;
          stan::model::assign(mu_obs, stan::math::multiply(X_mu_obs, psi_mu),
            "assigning variable mu_obs");
          current_statement__ = 28;
          if (n_miss) {
            current_statement__ = 27;
            stan::model::assign(mu_miss,
              stan::math::multiply(X_mu_miss, psi_mu),
              "assigning variable mu_miss");
          }
          current_statement__ = 30;
          if (n_cens) {
            current_statement__ = 29;
            stan::model::assign(mu_cens,
              stan::math::multiply(X_mu_cens, psi_mu),
              "assigning variable mu_cens");
          }
        }
        current_statement__ = 53;
        if (cst_sigma) {
          current_statement__ = 47;
          for (int i = 1; i <= n_obs; ++i) {
            current_statement__ = 46;
            stan::model::assign(sigma_obs,
              stan::model::rvalue(psi_sigma, "psi_sigma",
                stan::model::index_uni(1)), "assigning variable sigma_obs",
              stan::model::index_uni(i));
          }
          current_statement__ = 49;
          for (int i = 1; i <= n_miss; ++i) {
            current_statement__ = 48;
            stan::model::assign(sigma_miss,
              stan::model::rvalue(psi_sigma, "psi_sigma",
                stan::model::index_uni(1)), "assigning variable sigma_miss",
              stan::model::index_uni(i));
          }
          current_statement__ = 51;
          for (int i = 1; i <= n_cens; ++i) {
            current_statement__ = 50;
            stan::model::assign(sigma_cens,
              stan::model::rvalue(psi_sigma, "psi_sigma",
                stan::model::index_uni(1)), "assigning variable sigma_cens",
              stan::model::index_uni(i));
          }
        } else {
          current_statement__ = 40;
          stan::model::assign(sigma_obs,
            stan::math::multiply(X_sigma_obs, psi_sigma),
            "assigning variable sigma_obs");
          current_statement__ = 42;
          if (n_miss) {
            current_statement__ = 41;
            stan::model::assign(sigma_miss,
              stan::math::multiply(X_sigma_miss, psi_sigma),
              "assigning variable sigma_miss");
          }
          current_statement__ = 44;
          if (n_cens) {
            current_statement__ = 43;
            stan::model::assign(sigma_cens,
              stan::math::multiply(X_sigma_cens, psi_mu),
              "assigning variable sigma_cens");
          }
        }
        current_statement__ = 67;
        if (cst_xi) {
          current_statement__ = 61;
          for (int i = 1; i <= n_obs; ++i) {
            current_statement__ = 60;
            stan::model::assign(xi_obs,
              stan::model::rvalue(psi_xi, "psi_xi", stan::model::index_uni(1)),
              "assigning variable xi_obs", stan::model::index_uni(i));
          }
          current_statement__ = 63;
          for (int i = 1; i <= n_miss; ++i) {
            current_statement__ = 62;
            stan::model::assign(xi_miss,
              stan::model::rvalue(psi_xi, "psi_xi", stan::model::index_uni(1)),
              "assigning variable xi_miss", stan::model::index_uni(i));
          }
          current_statement__ = 65;
          for (int i = 1; i <= n_cens; ++i) {
            current_statement__ = 64;
            stan::model::assign(xi_cens,
              stan::model::rvalue(psi_xi, "psi_xi", stan::model::index_uni(1)),
              "assigning variable xi_cens", stan::model::index_uni(i));
          }
        } else {
          current_statement__ = 54;
          stan::model::assign(xi_obs, stan::math::multiply(X_xi_obs, psi_xi),
            "assigning variable xi_obs");
          current_statement__ = 56;
          if (n_miss) {
            current_statement__ = 55;
            stan::model::assign(xi_miss,
              stan::math::multiply(X_xi_miss, psi_xi),
              "assigning variable xi_miss");
          }
          current_statement__ = 58;
          if (n_cens) {
            current_statement__ = 57;
            stan::model::assign(xi_cens,
              stan::math::multiply(X_xi_cens, psi_xi),
              "assigning variable xi_cens");
          }
        }
        current_statement__ = 68;
        lp_accum__.add(gev_lpdf<propto__>(y_obs, mu_obs, sigma_obs, xi_obs,
                         pstream__));
        current_statement__ = 70;
        if (n_miss) {
          current_statement__ = 69;
          lp_accum__.add(gev_lpdf<propto__>(y_miss, mu_miss, sigma_miss,
                           xi_miss, pstream__));
        }
        current_statement__ = 81;
        for (int i = 1; i <= n_cens; ++i) {
          current_statement__ = 79;
          if (stan::math::logical_eq(
                stan::model::rvalue(code_cens, "code_cens",
                  stan::model::index_uni(i)), 1)) {
            current_statement__ = 77;
            lp_accum__.add(stan::math::log((1.0 -
                             gev_cdf(
                               stan::model::rvalue(yL_cens, "yL_cens",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(mu_cens, "mu_cens",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(sigma_cens, "sigma_cens",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(xi_cens, "xi_cens",
                                 stan::model::index_uni(i)), pstream__))));
          } else {
            current_statement__ = 76;
            if (stan::math::logical_eq(
                  stan::model::rvalue(code_cens, "code_cens",
                    stan::model::index_uni(i)), 2)) {
              current_statement__ = 74;
              lp_accum__.add(stan::math::log(
                               (gev_cdf(
                                  stan::model::rvalue(yU_cens, "yU_cens",
                                    stan::model::index_uni(i)),
                                  stan::model::rvalue(mu_cens, "mu_cens",
                                    stan::model::index_uni(i)),
                                  stan::model::rvalue(sigma_cens,
                                    "sigma_cens", stan::model::index_uni(i)),
                                  stan::model::rvalue(xi_cens, "xi_cens",
                                    stan::model::index_uni(i)), pstream__) -
                               gev_cdf(
                                 stan::model::rvalue(yL_cens, "yL_cens",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(mu_cens, "mu_cens",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(sigma_cens,
                                   "sigma_cens", stan::model::index_uni(i)),
                                 stan::model::rvalue(xi_cens, "xi_cens",
                                   stan::model::index_uni(i)), pstream__))));
            } else {
              current_statement__ = 73;
              if (stan::math::logical_eq(
                    stan::model::rvalue(code_cens, "code_cens",
                      stan::model::index_uni(i)), 3)) {
                current_statement__ = 71;
                lp_accum__.add(stan::math::log(
                                 gev_cdf(
                                   stan::model::rvalue(yU_cens, "yU_cens",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(mu_cens, "mu_cens",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(sigma_cens,
                                     "sigma_cens", stan::model::index_uni(i)),
                                   stan::model::rvalue(xi_cens, "xi_cens",
                                     stan::model::index_uni(i)), pstream__)));
              }
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_TVGEVCensor_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> psi_mu =
        Eigen::Matrix<double,-1,1>::Constant(p_mu,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      psi_mu = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p_mu);
      Eigen::Matrix<double,-1,1> psi_sigma =
        Eigen::Matrix<double,-1,1>::Constant(p_sigma,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      psi_sigma = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(p_sigma);
      Eigen::Matrix<double,-1,1> psi_xi =
        Eigen::Matrix<double,-1,1>::Constant(p_xi,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      psi_xi = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p_xi);
      Eigen::Matrix<double,-1,1> y_miss =
        Eigen::Matrix<double,-1,1>::Constant(n_miss,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      y_miss = in__.template read<
                 Eigen::Matrix<local_scalar_t__,-1,1>>(n_miss);
      out__.write(psi_mu);
      out__.write(psi_sigma);
      out__.write(psi_xi);
      out__.write(y_miss);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> psi_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_mu, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(psi_mu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p_mu),
        "assigning variable psi_mu");
      out__.write(psi_mu);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_sigma, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(psi_sigma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p_sigma),
        "assigning variable psi_sigma");
      out__.write(psi_sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_xi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_xi, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(psi_xi,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p_xi),
        "assigning variable psi_xi");
      out__.write(psi_xi);
      Eigen::Matrix<local_scalar_t__,-1,1> y_miss =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_miss, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(y_miss,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_miss),
        "assigning variable y_miss");
      out__.write(y_miss);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "psi_mu", "double",
        std::vector<size_t>{static_cast<size_t>(p_mu)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "psi_sigma",
        "double", std::vector<size_t>{static_cast<size_t>(p_sigma)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "psi_xi", "double",
        std::vector<size_t>{static_cast<size_t>(p_xi)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "y_miss", "double",
        std::vector<size_t>{static_cast<size_t>(n_miss)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> psi_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_mu, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> psi_mu_flat__;
        current_statement__ = 1;
        psi_mu_flat__ = context__.vals_r("psi_mu");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(psi_mu, psi_mu_flat__[(pos__ - 1)],
            "assigning variable psi_mu", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(psi_mu);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_sigma, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> psi_sigma_flat__;
        current_statement__ = 2;
        psi_sigma_flat__ = context__.vals_r("psi_sigma");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(psi_sigma, psi_sigma_flat__[(pos__ - 1)],
            "assigning variable psi_sigma", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(psi_sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_xi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_xi, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> psi_xi_flat__;
        current_statement__ = 3;
        psi_xi_flat__ = context__.vals_r("psi_xi");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(psi_xi, psi_xi_flat__[(pos__ - 1)],
            "assigning variable psi_xi", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(psi_xi);
      Eigen::Matrix<local_scalar_t__,-1,1> y_miss =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_miss, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> y_miss_flat__;
        current_statement__ = 4;
        y_miss_flat__ = context__.vals_r("y_miss");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(y_miss, y_miss_flat__[(pos__ - 1)],
            "assigning variable y_miss", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(y_miss);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"psi_mu", "psi_sigma", "psi_xi",
                "y_miss"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    p_mu)},
                std::vector<size_t>{static_cast<size_t>(p_sigma)},
                std::vector<size_t>{static_cast<size_t>(p_xi)},
                std::vector<size_t>{static_cast<size_t>(n_miss)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
      param_names__.emplace_back(std::string() + "psi_mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
      param_names__.emplace_back(std::string() + "psi_sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
      param_names__.emplace_back(std::string() + "psi_xi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
      param_names__.emplace_back(std::string() + "y_miss" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
      param_names__.emplace_back(std::string() + "psi_mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
      param_names__.emplace_back(std::string() + "psi_sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
      param_names__.emplace_back(std::string() + "psi_xi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
      param_names__.emplace_back(std::string() + "y_miss" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"psi_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p_mu) + "},\"block\":\"parameters\"},{\"name\":\"psi_sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p_sigma) + "},\"block\":\"parameters\"},{\"name\":\"psi_xi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p_xi) + "},\"block\":\"parameters\"},{\"name\":\"y_miss\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_miss) + "},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"psi_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p_mu) + "},\"block\":\"parameters\"},{\"name\":\"psi_sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p_sigma) + "},\"block\":\"parameters\"},{\"name\":\"psi_xi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p_xi) + "},\"block\":\"parameters\"},{\"name\":\"y_miss\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_miss) + "},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((p_mu + p_sigma) + p_xi) + n_miss);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((p_mu + p_sigma) + p_xi) + n_miss);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_TVGEVCensor_namespace::model_TVGEVCensor;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_TVGEVCensor_namespace::profiles__;
}
#endif
#endif
