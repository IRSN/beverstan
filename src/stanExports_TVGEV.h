// Generated by rstantools.  Do not edit by hand.

/*
    beverstan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    beverstan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with beverstan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_TVGEV_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 92> locations_array__ =
  {" (found before start of program)",
  " (in 'TVGEV', line 65, column 2 to column 22)",
  " (in 'TVGEV', line 66, column 2 to column 28)",
  " (in 'TVGEV', line 67, column 2 to column 22)",
  " (in 'TVGEV', line 70, column 9 to column 10)",
  " (in 'TVGEV', line 70, column 2 to column 15)",
  " (in 'TVGEV', line 71, column 9 to column 10)",
  " (in 'TVGEV', line 71, column 2 to column 18)",
  " (in 'TVGEV', line 72, column 9 to column 10)",
  " (in 'TVGEV', line 72, column 2 to column 15)",
  " (in 'TVGEV', line 76, column 2 to column 51)",
  " (in 'TVGEV', line 82, column 4 to column 23)",
  " (in 'TVGEV', line 81, column 9 to line 83, column 3)",
  " (in 'TVGEV', line 79, column 6 to column 24)",
  " (in 'TVGEV', line 78, column 19 to line 80, column 5)",
  " (in 'TVGEV', line 78, column 4 to line 80, column 5)",
  " (in 'TVGEV', line 77, column 14 to line 81, column 3)",
  " (in 'TVGEV', line 77, column 2 to line 83, column 3)",
  " (in 'TVGEV', line 85, column 2 to column 60)",
  " (in 'TVGEV', line 91, column 4 to column 32)",
  " (in 'TVGEV', line 90, column 9 to line 92, column 3)",
  " (in 'TVGEV', line 88, column 6 to column 30)",
  " (in 'TVGEV', line 87, column 19 to line 89, column 5)",
  " (in 'TVGEV', line 87, column 4 to line 89, column 5)",
  " (in 'TVGEV', line 86, column 17 to line 90, column 3)",
  " (in 'TVGEV', line 86, column 2 to line 92, column 3)",
  " (in 'TVGEV', line 94, column 2 to column 51)",
  " (in 'TVGEV', line 100, column 4 to column 23)",
  " (in 'TVGEV', line 99, column 9 to line 101, column 3)",
  " (in 'TVGEV', line 97, column 6 to column 24)",
  " (in 'TVGEV', line 96, column 19 to line 98, column 5)",
  " (in 'TVGEV', line 96, column 4 to line 98, column 5)",
  " (in 'TVGEV', line 95, column 14 to line 99, column 3)",
  " (in 'TVGEV', line 95, column 2 to line 101, column 3)",
  " (in 'TVGEV', line 104, column 2 to column 25)",
  " (in 'TVGEV', line 34, column 2 to column 17)",
  " (in 'TVGEV', line 35, column 9 to column 10)",
  " (in 'TVGEV', line 35, column 2 to column 14)",
  " (in 'TVGEV', line 38, column 2 to column 20)",
  " (in 'TVGEV', line 39, column 2 to column 23)",
  " (in 'TVGEV', line 40, column 2 to column 20)",
  " (in 'TVGEV', line 43, column 2 to column 22)",
  " (in 'TVGEV', line 44, column 2 to column 25)",
  " (in 'TVGEV', line 45, column 2 to column 22)",
  " (in 'TVGEV', line 48, column 9 to column 10)",
  " (in 'TVGEV', line 48, column 12 to column 16)",
  " (in 'TVGEV', line 48, column 2 to column 23)",
  " (in 'TVGEV', line 49, column 9 to column 10)",
  " (in 'TVGEV', line 49, column 12 to column 19)",
  " (in 'TVGEV', line 49, column 2 to column 29)",
  " (in 'TVGEV', line 50, column 9 to column 10)",
  " (in 'TVGEV', line 50, column 12 to column 16)",
  " (in 'TVGEV', line 50, column 2 to column 23)",
  " (in 'TVGEV', line 53, column 9 to column 13)",
  " (in 'TVGEV', line 53, column 15 to column 19)",
  " (in 'TVGEV', line 53, column 2 to column 33)",
  " (in 'TVGEV', line 54, column 9 to column 16)",
  " (in 'TVGEV', line 54, column 18 to column 25)",
  " (in 'TVGEV', line 54, column 2 to column 42)",
  " (in 'TVGEV', line 55, column 9 to column 13)",
  " (in 'TVGEV', line 55, column 15 to column 19)",
  " (in 'TVGEV', line 55, column 2 to column 33)",
  " (in 'TVGEV', line 58, column 9 to column 13)",
  " (in 'TVGEV', line 58, column 2 to column 28)",
  " (in 'TVGEV', line 59, column 9 to column 16)",
  " (in 'TVGEV', line 59, column 2 to column 34)",
  " (in 'TVGEV', line 60, column 9 to column 13)",
  " (in 'TVGEV', line 60, column 2 to column 28)",
  " (in 'TVGEV', line 65, column 9 to column 13)",
  " (in 'TVGEV', line 66, column 9 to column 16)",
  " (in 'TVGEV', line 67, column 9 to column 13)",
  " (in 'TVGEV', line 7, column 11 to column 18)",
  " (in 'TVGEV', line 7, column 4 to column 22)",
  " (in 'TVGEV', line 8, column 11 to column 18)",
  " (in 'TVGEV', line 8, column 4 to column 23)",
  " (in 'TVGEV', line 9, column 4 to column 10)",
  " (in 'TVGEV', line 10, column 4 to column 16)",
  " (in 'TVGEV', line 12, column 6 to line 13, column 62)",
  " (in 'TVGEV', line 14, column 6 to column 64)",
  " (in 'TVGEV', line 11, column 17 to line 15, column 5)",
  " (in 'TVGEV', line 11, column 4 to line 15, column 5)",
  " (in 'TVGEV', line 16, column 4 to column 19)",
  " (in 'TVGEV', line 6, column 62 to line 17, column 3)",
  " (in 'TVGEV', line 20, column 11 to column 18)",
  " (in 'TVGEV', line 20, column 4 to column 22)",
  " (in 'TVGEV', line 21, column 4 to column 10)",
  " (in 'TVGEV', line 22, column 4 to column 16)",
  " (in 'TVGEV', line 24, column 6 to line 25, column 62)",
  " (in 'TVGEV', line 23, column 17 to line 26, column 5)",
  " (in 'TVGEV', line 23, column 4 to line 26, column 5)",
  " (in 'TVGEV', line 27, column 4 to column 19)",
  " (in 'TVGEV', line 19, column 62 to line 28, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, stan::base_type_t<T3__>>
gev_lpdf(const T0__& y_arg__, const T1__& mu_arg__, const T2__& sigma_arg__,
         const T3__& xi_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, stan::base_type_t<T3__>>
gev_lcdf(const T0__& y_arg__, const T1__& mu_arg__, const T2__& sigma_arg__,
         const T3__& xi_arg__, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, stan::base_type_t<T3__>>
gev_lpdf(const T0__& y_arg__, const T1__& mu_arg__, const T2__& sigma_arg__,
         const T3__& xi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  const auto& mu = stan::math::to_ref(mu_arg__);
  const auto& sigma = stan::math::to_ref(sigma_arg__);
  const auto& xi = stan::math::to_ref(xi_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 71;
    stan::math::validate_non_negative_index("t", "rows(y)",
      stan::math::rows(y));
    Eigen::Matrix<local_scalar_t__,-1,1> t =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(y),
        DUMMY_VAR__);
    current_statement__ = 73;
    stan::math::validate_non_negative_index("lp", "rows(y)",
      stan::math::rows(y));
    Eigen::Matrix<local_scalar_t__,-1,1> lp =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(y),
        DUMMY_VAR__);
    int n = std::numeric_limits<int>::min();
    current_statement__ = 76;
    n = stan::math::rows(y);
    current_statement__ = 80;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 77;
      stan::model::assign(t,
        (stan::math::logical_eq(
           stan::model::rvalue(xi, "xi", stan::model::index_uni(i)), 0) ? 
        stan::math::exp(
          ((stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) -
          stan::model::rvalue(y, "y", stan::model::index_uni(i))) /
          stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)))) : 
        stan::math::pow((1.0 +
          (stan::model::rvalue(xi, "xi", stan::model::index_uni(i)) *
          ((stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i))) /
          stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i))))),
          (-1.0 / stan::model::rvalue(xi, "xi", stan::model::index_uni(i))))),
        "assigning variable t", stan::model::index_uni(i));
      current_statement__ = 78;
      stan::model::assign(lp,
        ((-stan::math::log(
             stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)))
        + ((stan::model::rvalue(xi, "xi", stan::model::index_uni(i)) + 1.0) *
        stan::math::log(
          stan::model::rvalue(t, "t", stan::model::index_uni(i))))) -
        stan::model::rvalue(t, "t", stan::model::index_uni(i))),
        "assigning variable lp", stan::model::index_uni(i));
    }
    current_statement__ = 81;
    return stan::math::sum(lp);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, stan::base_type_t<T3__>>
gev_lcdf(const T0__& y_arg__, const T1__& mu_arg__, const T2__& sigma_arg__,
         const T3__& xi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  const auto& mu = stan::math::to_ref(mu_arg__);
  const auto& sigma = stan::math::to_ref(sigma_arg__);
  const auto& xi = stan::math::to_ref(xi_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 83;
    stan::math::validate_non_negative_index("t", "rows(y)",
      stan::math::rows(y));
    Eigen::Matrix<local_scalar_t__,-1,1> t =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(y),
        DUMMY_VAR__);
    int n = std::numeric_limits<int>::min();
    current_statement__ = 86;
    n = stan::math::rows(y);
    current_statement__ = 89;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 87;
      stan::model::assign(t,
        (stan::math::logical_eq(
           stan::model::rvalue(xi, "xi", stan::model::index_uni(i)), 0) ? 
        stan::math::exp(
          ((stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) -
          stan::model::rvalue(y, "y", stan::model::index_uni(i))) /
          stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)))) : 
        stan::math::pow((1.0 +
          (stan::model::rvalue(xi, "xi", stan::model::index_uni(i)) *
          ((stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i))) /
          stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i))))),
          (-1.0 / stan::model::rvalue(xi, "xi", stan::model::index_uni(i))))),
        "assigning variable t", stan::model::index_uni(i));
    }
    current_statement__ = 90;
    return -stan::math::sum(t);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_TVGEV final : public model_base_crtp<model_TVGEV> {
private:
  int n;
  Eigen::Matrix<double,-1,1> y_data__;
  int p_mu;
  int p_sigma;
  int p_xi;
  int cst_mu;
  int cst_sigma;
  int cst_xi;
  Eigen::Matrix<double,-1,-1> X_mu_data__;
  Eigen::Matrix<double,-1,-1> X_sigma_data__;
  Eigen::Matrix<double,-1,-1> X_xi_data__;
  Eigen::Matrix<double,-1,-1> cov_psi_mu0_data__;
  Eigen::Matrix<double,-1,-1> cov_psi_sigma0_data__;
  Eigen::Matrix<double,-1,-1> cov_psi_xi0_data__;
  Eigen::Matrix<double,-1,1> mean_psi_mu0_data__;
  Eigen::Matrix<double,-1,1> mean_psi_sigma0_data__;
  Eigen::Matrix<double,-1,1> mean_psi_xi0_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_mu{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_sigma{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_xi{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> cov_psi_mu0{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> cov_psi_sigma0{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> cov_psi_xi0{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> mean_psi_mu0{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> mean_psi_sigma0{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> mean_psi_xi0{nullptr, 0};
public:
  ~model_TVGEV() {}
  model_TVGEV(stan::io::var_context& context__, unsigned int
              random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_TVGEV_namespace::model_TVGEV";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 35;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 35;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "n", n, 0);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("y", "n", n);
      current_statement__ = 37;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), n);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 37;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 37;
        pos__ = 1;
        current_statement__ = 37;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 37;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 37;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 38;
      context__.validate_dims("data initialization", "p_mu", "int",
        std::vector<size_t>{});
      p_mu = std::numeric_limits<int>::min();
      current_statement__ = 38;
      p_mu = context__.vals_i("p_mu")[(1 - 1)];
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "p_mu", p_mu, 1);
      current_statement__ = 39;
      context__.validate_dims("data initialization", "p_sigma", "int",
        std::vector<size_t>{});
      p_sigma = std::numeric_limits<int>::min();
      current_statement__ = 39;
      p_sigma = context__.vals_i("p_sigma")[(1 - 1)];
      current_statement__ = 39;
      stan::math::check_greater_or_equal(function__, "p_sigma", p_sigma, 1);
      current_statement__ = 40;
      context__.validate_dims("data initialization", "p_xi", "int",
        std::vector<size_t>{});
      p_xi = std::numeric_limits<int>::min();
      current_statement__ = 40;
      p_xi = context__.vals_i("p_xi")[(1 - 1)];
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "p_xi", p_xi, 1);
      current_statement__ = 41;
      context__.validate_dims("data initialization", "cst_mu", "int",
        std::vector<size_t>{});
      cst_mu = std::numeric_limits<int>::min();
      current_statement__ = 41;
      cst_mu = context__.vals_i("cst_mu")[(1 - 1)];
      current_statement__ = 41;
      stan::math::check_greater_or_equal(function__, "cst_mu", cst_mu, 0);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "cst_sigma", "int",
        std::vector<size_t>{});
      cst_sigma = std::numeric_limits<int>::min();
      current_statement__ = 42;
      cst_sigma = context__.vals_i("cst_sigma")[(1 - 1)];
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "cst_sigma", cst_sigma,
        0);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "cst_xi", "int",
        std::vector<size_t>{});
      cst_xi = std::numeric_limits<int>::min();
      current_statement__ = 43;
      cst_xi = context__.vals_i("cst_xi")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "cst_xi", cst_xi, 0);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("X_mu", "n", n);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("X_mu", "p_mu", p_mu);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "X_mu", "double",
        std::vector<size_t>{static_cast<size_t>(n),
          static_cast<size_t>(p_mu)});
      X_mu_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, p_mu,
                      std::numeric_limits<double>::quiet_NaN());
      new (&X_mu) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_mu_data__.data(),
        n, p_mu);
      {
        std::vector<local_scalar_t__> X_mu_flat__;
        current_statement__ = 46;
        X_mu_flat__ = context__.vals_r("X_mu");
        current_statement__ = 46;
        pos__ = 1;
        current_statement__ = 46;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 46;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 46;
            stan::model::assign(X_mu, X_mu_flat__[(pos__ - 1)],
              "assigning variable X_mu", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 46;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 47;
      stan::math::validate_non_negative_index("X_sigma", "n", n);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("X_sigma", "p_sigma", p_sigma);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "X_sigma", "double",
        std::vector<size_t>{static_cast<size_t>(n),
          static_cast<size_t>(p_sigma)});
      X_sigma_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, p_sigma,
                         std::numeric_limits<double>::quiet_NaN());
      new (&X_sigma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_sigma_data__.data(), n,
        p_sigma);
      {
        std::vector<local_scalar_t__> X_sigma_flat__;
        current_statement__ = 49;
        X_sigma_flat__ = context__.vals_r("X_sigma");
        current_statement__ = 49;
        pos__ = 1;
        current_statement__ = 49;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 49;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 49;
            stan::model::assign(X_sigma, X_sigma_flat__[(pos__ - 1)],
              "assigning variable X_sigma", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 49;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 50;
      stan::math::validate_non_negative_index("X_xi", "n", n);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("X_xi", "p_xi", p_xi);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "X_xi", "double",
        std::vector<size_t>{static_cast<size_t>(n),
          static_cast<size_t>(p_xi)});
      X_xi_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, p_xi,
                      std::numeric_limits<double>::quiet_NaN());
      new (&X_xi) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_xi_data__.data(),
        n, p_xi);
      {
        std::vector<local_scalar_t__> X_xi_flat__;
        current_statement__ = 52;
        X_xi_flat__ = context__.vals_r("X_xi");
        current_statement__ = 52;
        pos__ = 1;
        current_statement__ = 52;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 52;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 52;
            stan::model::assign(X_xi, X_xi_flat__[(pos__ - 1)],
              "assigning variable X_xi", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 52;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 53;
      stan::math::validate_non_negative_index("cov_psi_mu0", "p_mu", p_mu);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("cov_psi_mu0", "p_mu", p_mu);
      current_statement__ = 55;
      context__.validate_dims("data initialization", "cov_psi_mu0", "double",
        std::vector<size_t>{static_cast<size_t>(p_mu),
          static_cast<size_t>(p_mu)});
      cov_psi_mu0_data__ = Eigen::Matrix<double,-1,-1>::Constant(p_mu, p_mu,
                             std::numeric_limits<double>::quiet_NaN());
      new (&cov_psi_mu0)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(cov_psi_mu0_data__.data(),
        p_mu, p_mu);
      {
        std::vector<local_scalar_t__> cov_psi_mu0_flat__;
        current_statement__ = 55;
        cov_psi_mu0_flat__ = context__.vals_r("cov_psi_mu0");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 55;
          for (int sym2__ = 1; sym2__ <= p_mu; ++sym2__) {
            current_statement__ = 55;
            stan::model::assign(cov_psi_mu0, cov_psi_mu0_flat__[(pos__ - 1)],
              "assigning variable cov_psi_mu0",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 55;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 56;
      stan::math::validate_non_negative_index("cov_psi_sigma0", "p_sigma",
        p_sigma);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("cov_psi_sigma0", "p_sigma",
        p_sigma);
      current_statement__ = 58;
      context__.validate_dims("data initialization", "cov_psi_sigma0",
        "double",
        std::vector<size_t>{static_cast<size_t>(p_sigma),
          static_cast<size_t>(p_sigma)});
      cov_psi_sigma0_data__ = Eigen::Matrix<double,-1,-1>::Constant(p_sigma,
                                p_sigma,
                                std::numeric_limits<double>::quiet_NaN());
      new (&cov_psi_sigma0)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(cov_psi_sigma0_data__.data(),
        p_sigma, p_sigma);
      {
        std::vector<local_scalar_t__> cov_psi_sigma0_flat__;
        current_statement__ = 58;
        cov_psi_sigma0_flat__ = context__.vals_r("cov_psi_sigma0");
        current_statement__ = 58;
        pos__ = 1;
        current_statement__ = 58;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 58;
          for (int sym2__ = 1; sym2__ <= p_sigma; ++sym2__) {
            current_statement__ = 58;
            stan::model::assign(cov_psi_sigma0, cov_psi_sigma0_flat__[(pos__
              - 1)], "assigning variable cov_psi_sigma0",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 58;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 59;
      stan::math::validate_non_negative_index("cov_psi_xi0", "p_xi", p_xi);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("cov_psi_xi0", "p_xi", p_xi);
      current_statement__ = 61;
      context__.validate_dims("data initialization", "cov_psi_xi0", "double",
        std::vector<size_t>{static_cast<size_t>(p_xi),
          static_cast<size_t>(p_xi)});
      cov_psi_xi0_data__ = Eigen::Matrix<double,-1,-1>::Constant(p_xi, p_xi,
                             std::numeric_limits<double>::quiet_NaN());
      new (&cov_psi_xi0)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(cov_psi_xi0_data__.data(),
        p_xi, p_xi);
      {
        std::vector<local_scalar_t__> cov_psi_xi0_flat__;
        current_statement__ = 61;
        cov_psi_xi0_flat__ = context__.vals_r("cov_psi_xi0");
        current_statement__ = 61;
        pos__ = 1;
        current_statement__ = 61;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 61;
          for (int sym2__ = 1; sym2__ <= p_xi; ++sym2__) {
            current_statement__ = 61;
            stan::model::assign(cov_psi_xi0, cov_psi_xi0_flat__[(pos__ - 1)],
              "assigning variable cov_psi_xi0",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 61;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 62;
      stan::math::validate_non_negative_index("mean_psi_mu0", "p_mu", p_mu);
      current_statement__ = 63;
      context__.validate_dims("data initialization", "mean_psi_mu0",
        "double", std::vector<size_t>{static_cast<size_t>(p_mu)});
      mean_psi_mu0_data__ = Eigen::Matrix<double,-1,1>::Constant(p_mu,
                              std::numeric_limits<double>::quiet_NaN());
      new (&mean_psi_mu0)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(mean_psi_mu0_data__.data(),
        p_mu);
      {
        std::vector<local_scalar_t__> mean_psi_mu0_flat__;
        current_statement__ = 63;
        mean_psi_mu0_flat__ = context__.vals_r("mean_psi_mu0");
        current_statement__ = 63;
        pos__ = 1;
        current_statement__ = 63;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 63;
          stan::model::assign(mean_psi_mu0, mean_psi_mu0_flat__[(pos__ - 1)],
            "assigning variable mean_psi_mu0", stan::model::index_uni(sym1__));
          current_statement__ = 63;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 64;
      stan::math::validate_non_negative_index("mean_psi_sigma0", "p_sigma",
        p_sigma);
      current_statement__ = 65;
      context__.validate_dims("data initialization", "mean_psi_sigma0",
        "double", std::vector<size_t>{static_cast<size_t>(p_sigma)});
      mean_psi_sigma0_data__ = Eigen::Matrix<double,-1,1>::Constant(p_sigma,
                                 std::numeric_limits<double>::quiet_NaN());
      new (&mean_psi_sigma0)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(mean_psi_sigma0_data__.data(),
        p_sigma);
      {
        std::vector<local_scalar_t__> mean_psi_sigma0_flat__;
        current_statement__ = 65;
        mean_psi_sigma0_flat__ = context__.vals_r("mean_psi_sigma0");
        current_statement__ = 65;
        pos__ = 1;
        current_statement__ = 65;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 65;
          stan::model::assign(mean_psi_sigma0, mean_psi_sigma0_flat__[(pos__
            - 1)], "assigning variable mean_psi_sigma0",
            stan::model::index_uni(sym1__));
          current_statement__ = 65;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 66;
      stan::math::validate_non_negative_index("mean_psi_xi0", "p_xi", p_xi);
      current_statement__ = 67;
      context__.validate_dims("data initialization", "mean_psi_xi0",
        "double", std::vector<size_t>{static_cast<size_t>(p_xi)});
      mean_psi_xi0_data__ = Eigen::Matrix<double,-1,1>::Constant(p_xi,
                              std::numeric_limits<double>::quiet_NaN());
      new (&mean_psi_xi0)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(mean_psi_xi0_data__.data(),
        p_xi);
      {
        std::vector<local_scalar_t__> mean_psi_xi0_flat__;
        current_statement__ = 67;
        mean_psi_xi0_flat__ = context__.vals_r("mean_psi_xi0");
        current_statement__ = 67;
        pos__ = 1;
        current_statement__ = 67;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 67;
          stan::model::assign(mean_psi_xi0, mean_psi_xi0_flat__[(pos__ - 1)],
            "assigning variable mean_psi_xi0", stan::model::index_uni(sym1__));
          current_statement__ = 67;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 68;
      stan::math::validate_non_negative_index("psi_mu", "p_mu", p_mu);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("psi_sigma", "p_sigma", p_sigma);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("psi_xi", "p_xi", p_xi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = p_mu + p_sigma + p_xi;
  }
  inline std::string model_name() const final {
    return "model_TVGEV";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_TVGEV_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> psi_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_mu, DUMMY_VAR__);
      current_statement__ = 1;
      psi_mu = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p_mu);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_sigma, DUMMY_VAR__);
      current_statement__ = 2;
      psi_sigma = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(p_sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_xi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_xi, DUMMY_VAR__);
      current_statement__ = 3;
      psi_xi = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p_xi);
      {
        current_statement__ = 4;
        stan::math::validate_non_negative_index("mu", "n", n);
        Eigen::Matrix<local_scalar_t__,-1,1> mu =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
        current_statement__ = 6;
        stan::math::validate_non_negative_index("sigma", "n", n);
        Eigen::Matrix<local_scalar_t__,-1,1> sigma =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
        current_statement__ = 8;
        stan::math::validate_non_negative_index("xi", "n", n);
        Eigen::Matrix<local_scalar_t__,-1,1> xi =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
        current_statement__ = 10;
        lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(psi_mu,
                         mean_psi_mu0, cov_psi_mu0));
        current_statement__ = 17;
        if (cst_mu) {
          current_statement__ = 15;
          for (int i = 1; i <= n; ++i) {
            current_statement__ = 13;
            stan::model::assign(mu,
              stan::model::rvalue(psi_mu, "psi_mu", stan::model::index_uni(1)),
              "assigning variable mu", stan::model::index_uni(i));
          }
        } else {
          current_statement__ = 11;
          stan::model::assign(mu, stan::math::multiply(X_mu, psi_mu),
            "assigning variable mu");
        }
        current_statement__ = 18;
        lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(psi_sigma,
                         mean_psi_sigma0, cov_psi_sigma0));
        current_statement__ = 25;
        if (cst_sigma) {
          current_statement__ = 23;
          for (int i = 1; i <= n; ++i) {
            current_statement__ = 21;
            stan::model::assign(sigma,
              stan::model::rvalue(psi_sigma, "psi_sigma",
                stan::model::index_uni(1)), "assigning variable sigma",
              stan::model::index_uni(i));
          }
        } else {
          current_statement__ = 19;
          stan::model::assign(sigma,
            stan::math::multiply(X_sigma, psi_sigma),
            "assigning variable sigma");
        }
        current_statement__ = 26;
        lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(psi_xi,
                         mean_psi_xi0, cov_psi_xi0));
        current_statement__ = 33;
        if (cst_xi) {
          current_statement__ = 31;
          for (int i = 1; i <= n; ++i) {
            current_statement__ = 29;
            stan::model::assign(xi,
              stan::model::rvalue(psi_xi, "psi_xi", stan::model::index_uni(1)),
              "assigning variable xi", stan::model::index_uni(i));
          }
        } else {
          current_statement__ = 27;
          stan::model::assign(xi, stan::math::multiply(X_xi, psi_xi),
            "assigning variable xi");
        }
        current_statement__ = 34;
        lp_accum__.add(gev_lpdf<propto__>(y, mu, sigma, xi, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_TVGEV_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> psi_mu =
        Eigen::Matrix<double,-1,1>::Constant(p_mu,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      psi_mu = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p_mu);
      Eigen::Matrix<double,-1,1> psi_sigma =
        Eigen::Matrix<double,-1,1>::Constant(p_sigma,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      psi_sigma = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(p_sigma);
      Eigen::Matrix<double,-1,1> psi_xi =
        Eigen::Matrix<double,-1,1>::Constant(p_xi,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      psi_xi = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p_xi);
      out__.write(psi_mu);
      out__.write(psi_sigma);
      out__.write(psi_xi);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> psi_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_mu, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(psi_mu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p_mu),
        "assigning variable psi_mu");
      out__.write(psi_mu);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_sigma, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(psi_sigma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p_sigma),
        "assigning variable psi_sigma");
      out__.write(psi_sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_xi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_xi, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(psi_xi,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p_xi),
        "assigning variable psi_xi");
      out__.write(psi_xi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "psi_mu", "double",
        std::vector<size_t>{static_cast<size_t>(p_mu)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "psi_sigma",
        "double", std::vector<size_t>{static_cast<size_t>(p_sigma)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "psi_xi", "double",
        std::vector<size_t>{static_cast<size_t>(p_xi)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> psi_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_mu, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> psi_mu_flat__;
        current_statement__ = 1;
        psi_mu_flat__ = context__.vals_r("psi_mu");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(psi_mu, psi_mu_flat__[(pos__ - 1)],
            "assigning variable psi_mu", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(psi_mu);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_sigma, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> psi_sigma_flat__;
        current_statement__ = 2;
        psi_sigma_flat__ = context__.vals_r("psi_sigma");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(psi_sigma, psi_sigma_flat__[(pos__ - 1)],
            "assigning variable psi_sigma", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(psi_sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_xi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_xi, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> psi_xi_flat__;
        current_statement__ = 3;
        psi_xi_flat__ = context__.vals_r("psi_xi");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(psi_xi, psi_xi_flat__[(pos__ - 1)],
            "assigning variable psi_xi", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(psi_xi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"psi_mu", "psi_sigma", "psi_xi"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    p_mu)},
                std::vector<size_t>{static_cast<size_t>(p_sigma)},
                std::vector<size_t>{static_cast<size_t>(p_xi)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
      param_names__.emplace_back(std::string() + "psi_mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
      param_names__.emplace_back(std::string() + "psi_sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
      param_names__.emplace_back(std::string() + "psi_xi" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
      param_names__.emplace_back(std::string() + "psi_mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
      param_names__.emplace_back(std::string() + "psi_sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
      param_names__.emplace_back(std::string() + "psi_xi" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"psi_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p_mu) + "},\"block\":\"parameters\"},{\"name\":\"psi_sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p_sigma) + "},\"block\":\"parameters\"},{\"name\":\"psi_xi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p_xi) + "},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"psi_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p_mu) + "},\"block\":\"parameters\"},{\"name\":\"psi_sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p_sigma) + "},\"block\":\"parameters\"},{\"name\":\"psi_xi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p_xi) + "},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((p_mu + p_sigma) + p_xi);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((p_mu + p_sigma) + p_xi);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_TVGEV_namespace::model_TVGEV;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_TVGEV_namespace::profiles__;
}
#endif
#endif
