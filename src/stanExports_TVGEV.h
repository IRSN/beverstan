// Generated by rstantools.  Do not edit by hand.

/*
    beverstan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    beverstan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with beverstan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_TVGEV_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'TVGEV', line 65, column 2 to column 22)",
                                                      " (in 'TVGEV', line 66, column 2 to column 28)",
                                                      " (in 'TVGEV', line 67, column 2 to column 22)",
                                                      " (in 'TVGEV', line 70, column 9 to column 10)",
                                                      " (in 'TVGEV', line 70, column 2 to column 15)",
                                                      " (in 'TVGEV', line 71, column 9 to column 10)",
                                                      " (in 'TVGEV', line 71, column 2 to column 18)",
                                                      " (in 'TVGEV', line 72, column 9 to column 10)",
                                                      " (in 'TVGEV', line 72, column 2 to column 15)",
                                                      " (in 'TVGEV', line 76, column 2 to column 51)",
                                                      " (in 'TVGEV', line 82, column 4 to column 23)",
                                                      " (in 'TVGEV', line 81, column 9 to line 83, column 3)",
                                                      " (in 'TVGEV', line 79, column 6 to column 24)",
                                                      " (in 'TVGEV', line 78, column 19 to line 80, column 5)",
                                                      " (in 'TVGEV', line 78, column 4 to line 80, column 5)",
                                                      " (in 'TVGEV', line 77, column 14 to line 81, column 3)",
                                                      " (in 'TVGEV', line 77, column 2 to line 83, column 3)",
                                                      " (in 'TVGEV', line 85, column 2 to column 60)",
                                                      " (in 'TVGEV', line 91, column 4 to column 32)",
                                                      " (in 'TVGEV', line 90, column 9 to line 92, column 3)",
                                                      " (in 'TVGEV', line 88, column 6 to column 30)",
                                                      " (in 'TVGEV', line 87, column 19 to line 89, column 5)",
                                                      " (in 'TVGEV', line 87, column 4 to line 89, column 5)",
                                                      " (in 'TVGEV', line 86, column 17 to line 90, column 3)",
                                                      " (in 'TVGEV', line 86, column 2 to line 92, column 3)",
                                                      " (in 'TVGEV', line 94, column 2 to column 51)",
                                                      " (in 'TVGEV', line 100, column 4 to column 23)",
                                                      " (in 'TVGEV', line 99, column 9 to line 101, column 3)",
                                                      " (in 'TVGEV', line 97, column 6 to column 24)",
                                                      " (in 'TVGEV', line 96, column 19 to line 98, column 5)",
                                                      " (in 'TVGEV', line 96, column 4 to line 98, column 5)",
                                                      " (in 'TVGEV', line 95, column 14 to line 99, column 3)",
                                                      " (in 'TVGEV', line 95, column 2 to line 101, column 3)",
                                                      " (in 'TVGEV', line 104, column 2 to column 25)",
                                                      " (in 'TVGEV', line 34, column 2 to column 17)",
                                                      " (in 'TVGEV', line 35, column 9 to column 10)",
                                                      " (in 'TVGEV', line 35, column 2 to column 14)",
                                                      " (in 'TVGEV', line 38, column 2 to column 20)",
                                                      " (in 'TVGEV', line 39, column 2 to column 23)",
                                                      " (in 'TVGEV', line 40, column 2 to column 20)",
                                                      " (in 'TVGEV', line 43, column 2 to column 22)",
                                                      " (in 'TVGEV', line 44, column 2 to column 25)",
                                                      " (in 'TVGEV', line 45, column 2 to column 22)",
                                                      " (in 'TVGEV', line 48, column 9 to column 10)",
                                                      " (in 'TVGEV', line 48, column 12 to column 16)",
                                                      " (in 'TVGEV', line 48, column 2 to column 23)",
                                                      " (in 'TVGEV', line 49, column 9 to column 10)",
                                                      " (in 'TVGEV', line 49, column 12 to column 19)",
                                                      " (in 'TVGEV', line 49, column 2 to column 29)",
                                                      " (in 'TVGEV', line 50, column 9 to column 10)",
                                                      " (in 'TVGEV', line 50, column 12 to column 16)",
                                                      " (in 'TVGEV', line 50, column 2 to column 23)",
                                                      " (in 'TVGEV', line 53, column 9 to column 13)",
                                                      " (in 'TVGEV', line 53, column 15 to column 19)",
                                                      " (in 'TVGEV', line 53, column 2 to column 33)",
                                                      " (in 'TVGEV', line 54, column 9 to column 16)",
                                                      " (in 'TVGEV', line 54, column 18 to column 25)",
                                                      " (in 'TVGEV', line 54, column 2 to column 42)",
                                                      " (in 'TVGEV', line 55, column 9 to column 13)",
                                                      " (in 'TVGEV', line 55, column 15 to column 19)",
                                                      " (in 'TVGEV', line 55, column 2 to column 33)",
                                                      " (in 'TVGEV', line 58, column 9 to column 13)",
                                                      " (in 'TVGEV', line 58, column 2 to column 28)",
                                                      " (in 'TVGEV', line 59, column 9 to column 16)",
                                                      " (in 'TVGEV', line 59, column 2 to column 34)",
                                                      " (in 'TVGEV', line 60, column 9 to column 13)",
                                                      " (in 'TVGEV', line 60, column 2 to column 28)",
                                                      " (in 'TVGEV', line 65, column 9 to column 13)",
                                                      " (in 'TVGEV', line 66, column 9 to column 16)",
                                                      " (in 'TVGEV', line 67, column 9 to column 13)",
                                                      " (in 'TVGEV', line 7, column 11 to column 18)",
                                                      " (in 'TVGEV', line 7, column 4 to column 22)",
                                                      " (in 'TVGEV', line 8, column 11 to column 18)",
                                                      " (in 'TVGEV', line 8, column 4 to column 23)",
                                                      " (in 'TVGEV', line 9, column 4 to column 10)",
                                                      " (in 'TVGEV', line 10, column 4 to column 16)",
                                                      " (in 'TVGEV', line 12, column 6 to line 13, column 62)",
                                                      " (in 'TVGEV', line 14, column 6 to column 64)",
                                                      " (in 'TVGEV', line 11, column 17 to line 15, column 5)",
                                                      " (in 'TVGEV', line 11, column 4 to line 15, column 5)",
                                                      " (in 'TVGEV', line 16, column 4 to column 19)",
                                                      " (in 'TVGEV', line 6, column 62 to line 17, column 3)",
                                                      " (in 'TVGEV', line 20, column 11 to column 18)",
                                                      " (in 'TVGEV', line 20, column 4 to column 22)",
                                                      " (in 'TVGEV', line 21, column 4 to column 10)",
                                                      " (in 'TVGEV', line 22, column 4 to column 16)",
                                                      " (in 'TVGEV', line 24, column 6 to line 25, column 62)",
                                                      " (in 'TVGEV', line 23, column 17 to line 26, column 5)",
                                                      " (in 'TVGEV', line 23, column 4 to line 26, column 5)",
                                                      " (in 'TVGEV', line 27, column 4 to column 19)",
                                                      " (in 'TVGEV', line 19, column 62 to line 28, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>
gev_lpdf(const T0__& y_arg__, const T1__& mu_arg__, const T2__& sigma_arg__,
         const T3__& xi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  const auto& y = to_ref(y_arg__);
  const auto& mu = to_ref(mu_arg__);
  const auto& sigma = to_ref(sigma_arg__);
  const auto& xi = to_ref(xi_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 71;
    validate_non_negative_index("t", "rows(y)", rows(y));
    Eigen::Matrix<local_scalar_t__, -1, 1> t;
    t = Eigen::Matrix<local_scalar_t__, -1, 1>(rows(y));
    stan::math::fill(t, DUMMY_VAR__);
    
    current_statement__ = 73;
    validate_non_negative_index("lp", "rows(y)", rows(y));
    Eigen::Matrix<local_scalar_t__, -1, 1> lp;
    lp = Eigen::Matrix<local_scalar_t__, -1, 1>(rows(y));
    stan::math::fill(lp, DUMMY_VAR__);
    
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 76;
    n = rows(y);
    current_statement__ = 80;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 77;
      assign(t, cons_list(index_uni(i), nil_index_list()),
        (logical_eq(xi[(i - 1)], 0) ?
           stan::math::exp(((mu[(i - 1)] - y[(i - 1)]) / sigma[(i - 1)])) :
           pow(
             (1.0 +
               (xi[(i - 1)] * ((y[(i - 1)] - mu[(i - 1)]) / sigma[(i - 1)]))),
             (-1.0 / xi[(i - 1)]))), "assigning variable t");
      current_statement__ = 78;
      assign(lp, cons_list(index_uni(i), nil_index_list()),
        ((-stan::math::log(sigma[(i - 1)]) +
           ((xi[(i - 1)] + 1.0) * stan::math::log(t[(i - 1)]))) - t[(i - 1)]),
        "assigning variable lp");}
    current_statement__ = 81;
    return sum(lp);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct gev_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>
operator()(const T0__& y, const T1__& mu, const T2__& sigma, const T3__& xi,
           std::ostream* pstream__)  const 
{
return gev_lpdf<propto__>(y, mu, sigma, xi, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>
gev_lcdf(const T0__& y_arg__, const T1__& mu_arg__, const T2__& sigma_arg__,
         const T3__& xi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  const auto& y = to_ref(y_arg__);
  const auto& mu = to_ref(mu_arg__);
  const auto& sigma = to_ref(sigma_arg__);
  const auto& xi = to_ref(xi_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 83;
    validate_non_negative_index("t", "rows(y)", rows(y));
    Eigen::Matrix<local_scalar_t__, -1, 1> t;
    t = Eigen::Matrix<local_scalar_t__, -1, 1>(rows(y));
    stan::math::fill(t, DUMMY_VAR__);
    
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 86;
    n = rows(y);
    current_statement__ = 89;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 87;
      assign(t, cons_list(index_uni(i), nil_index_list()),
        (logical_eq(xi[(i - 1)], 0) ?
           stan::math::exp(((mu[(i - 1)] - y[(i - 1)]) / sigma[(i - 1)])) :
           pow(
             (1.0 +
               (xi[(i - 1)] * ((y[(i - 1)] - mu[(i - 1)]) / sigma[(i - 1)]))),
             (-1.0 / xi[(i - 1)]))), "assigning variable t");}
    current_statement__ = 90;
    return -sum(t);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct gev_lcdf_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>
operator()(const T0__& y, const T1__& mu, const T2__& sigma, const T3__& xi,
           std::ostream* pstream__)  const 
{
return gev_lcdf(y, mu, sigma, xi, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_TVGEV final : public model_base_crtp<model_TVGEV> {
private:
  int n;
  Eigen::Matrix<double, -1, 1> y;
  int p_mu;
  int p_sigma;
  int p_xi;
  int cst_mu;
  int cst_sigma;
  int cst_xi;
  Eigen::Matrix<double, -1, -1> X_mu;
  Eigen::Matrix<double, -1, -1> X_sigma;
  Eigen::Matrix<double, -1, -1> X_xi;
  Eigen::Matrix<double, -1, -1> cov_psi_mu0;
  Eigen::Matrix<double, -1, -1> cov_psi_sigma0;
  Eigen::Matrix<double, -1, -1> cov_psi_xi0;
  Eigen::Matrix<double, -1, 1> mean_psi_mu0;
  Eigen::Matrix<double, -1, 1> mean_psi_sigma0;
  Eigen::Matrix<double, -1, 1> mean_psi_xi0;
 
public:
  ~model_TVGEV() { }
  
  inline std::string model_name() const final { return "model_TVGEV"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_TVGEV(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_TVGEV_namespace::model_TVGEV";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 35;
      context__.validate_dims("data initialization","n","int",
          context__.to_vec());
      n = std::numeric_limits<int>::min();
      
      current_statement__ = 35;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 35;
      current_statement__ = 35;
      check_greater_or_equal(function__, "n", n, 0);
      current_statement__ = 36;
      validate_non_negative_index("y", "n", n);
      current_statement__ = 37;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(n));
      y = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 37;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 37;
        pos__ = 1;
        current_statement__ = 37;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 37;
          assign(y, cons_list(index_uni(sym1__), nil_index_list()),
            y_flat__[(pos__ - 1)], "assigning variable y");
          current_statement__ = 37;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 38;
      context__.validate_dims("data initialization","p_mu","int",
          context__.to_vec());
      p_mu = std::numeric_limits<int>::min();
      
      current_statement__ = 38;
      p_mu = context__.vals_i("p_mu")[(1 - 1)];
      current_statement__ = 38;
      current_statement__ = 38;
      check_greater_or_equal(function__, "p_mu", p_mu, 1);
      current_statement__ = 39;
      context__.validate_dims("data initialization","p_sigma","int",
          context__.to_vec());
      p_sigma = std::numeric_limits<int>::min();
      
      current_statement__ = 39;
      p_sigma = context__.vals_i("p_sigma")[(1 - 1)];
      current_statement__ = 39;
      current_statement__ = 39;
      check_greater_or_equal(function__, "p_sigma", p_sigma, 1);
      current_statement__ = 40;
      context__.validate_dims("data initialization","p_xi","int",
          context__.to_vec());
      p_xi = std::numeric_limits<int>::min();
      
      current_statement__ = 40;
      p_xi = context__.vals_i("p_xi")[(1 - 1)];
      current_statement__ = 40;
      current_statement__ = 40;
      check_greater_or_equal(function__, "p_xi", p_xi, 1);
      current_statement__ = 41;
      context__.validate_dims("data initialization","cst_mu","int",
          context__.to_vec());
      cst_mu = std::numeric_limits<int>::min();
      
      current_statement__ = 41;
      cst_mu = context__.vals_i("cst_mu")[(1 - 1)];
      current_statement__ = 41;
      current_statement__ = 41;
      check_greater_or_equal(function__, "cst_mu", cst_mu, 0);
      current_statement__ = 42;
      context__.validate_dims("data initialization","cst_sigma","int",
          context__.to_vec());
      cst_sigma = std::numeric_limits<int>::min();
      
      current_statement__ = 42;
      cst_sigma = context__.vals_i("cst_sigma")[(1 - 1)];
      current_statement__ = 42;
      current_statement__ = 42;
      check_greater_or_equal(function__, "cst_sigma", cst_sigma, 0);
      current_statement__ = 43;
      context__.validate_dims("data initialization","cst_xi","int",
          context__.to_vec());
      cst_xi = std::numeric_limits<int>::min();
      
      current_statement__ = 43;
      cst_xi = context__.vals_i("cst_xi")[(1 - 1)];
      current_statement__ = 43;
      current_statement__ = 43;
      check_greater_or_equal(function__, "cst_xi", cst_xi, 0);
      current_statement__ = 44;
      validate_non_negative_index("X_mu", "n", n);
      current_statement__ = 45;
      validate_non_negative_index("X_mu", "p_mu", p_mu);
      current_statement__ = 46;
      context__.validate_dims("data initialization","X_mu","double",
          context__.to_vec(n, p_mu));
      X_mu = Eigen::Matrix<double, -1, -1>(n, p_mu);
      stan::math::fill(X_mu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_mu_flat__;
        current_statement__ = 46;
        assign(X_mu_flat__, nil_index_list(), context__.vals_r("X_mu"),
          "assigning variable X_mu_flat__");
        current_statement__ = 46;
        pos__ = 1;
        current_statement__ = 46;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 46;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 46;
            assign(X_mu,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_mu_flat__[(pos__ - 1)], "assigning variable X_mu");
            current_statement__ = 46;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 47;
      validate_non_negative_index("X_sigma", "n", n);
      current_statement__ = 48;
      validate_non_negative_index("X_sigma", "p_sigma", p_sigma);
      current_statement__ = 49;
      context__.validate_dims("data initialization","X_sigma","double",
          context__.to_vec(n, p_sigma));
      X_sigma = Eigen::Matrix<double, -1, -1>(n, p_sigma);
      stan::math::fill(X_sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_sigma_flat__;
        current_statement__ = 49;
        assign(X_sigma_flat__, nil_index_list(), context__.vals_r("X_sigma"),
          "assigning variable X_sigma_flat__");
        current_statement__ = 49;
        pos__ = 1;
        current_statement__ = 49;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 49;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 49;
            assign(X_sigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_sigma_flat__[(pos__ - 1)], "assigning variable X_sigma");
            current_statement__ = 49;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 50;
      validate_non_negative_index("X_xi", "n", n);
      current_statement__ = 51;
      validate_non_negative_index("X_xi", "p_xi", p_xi);
      current_statement__ = 52;
      context__.validate_dims("data initialization","X_xi","double",
          context__.to_vec(n, p_xi));
      X_xi = Eigen::Matrix<double, -1, -1>(n, p_xi);
      stan::math::fill(X_xi, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_xi_flat__;
        current_statement__ = 52;
        assign(X_xi_flat__, nil_index_list(), context__.vals_r("X_xi"),
          "assigning variable X_xi_flat__");
        current_statement__ = 52;
        pos__ = 1;
        current_statement__ = 52;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 52;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 52;
            assign(X_xi,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_xi_flat__[(pos__ - 1)], "assigning variable X_xi");
            current_statement__ = 52;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 53;
      validate_non_negative_index("cov_psi_mu0", "p_mu", p_mu);
      current_statement__ = 54;
      validate_non_negative_index("cov_psi_mu0", "p_mu", p_mu);
      current_statement__ = 55;
      context__.validate_dims("data initialization","cov_psi_mu0","double",
          context__.to_vec(p_mu, p_mu));
      cov_psi_mu0 = Eigen::Matrix<double, -1, -1>(p_mu, p_mu);
      stan::math::fill(cov_psi_mu0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> cov_psi_mu0_flat__;
        current_statement__ = 55;
        assign(cov_psi_mu0_flat__, nil_index_list(),
          context__.vals_r("cov_psi_mu0"),
          "assigning variable cov_psi_mu0_flat__");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 55;
          for (int sym2__ = 1; sym2__ <= p_mu; ++sym2__) {
            current_statement__ = 55;
            assign(cov_psi_mu0,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              cov_psi_mu0_flat__[(pos__ - 1)],
              "assigning variable cov_psi_mu0");
            current_statement__ = 55;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 56;
      validate_non_negative_index("cov_psi_sigma0", "p_sigma", p_sigma);
      current_statement__ = 57;
      validate_non_negative_index("cov_psi_sigma0", "p_sigma", p_sigma);
      current_statement__ = 58;
      context__.validate_dims("data initialization","cov_psi_sigma0",
          "double",context__.to_vec(p_sigma, p_sigma));
      cov_psi_sigma0 = Eigen::Matrix<double, -1, -1>(p_sigma, p_sigma);
      stan::math::fill(cov_psi_sigma0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> cov_psi_sigma0_flat__;
        current_statement__ = 58;
        assign(cov_psi_sigma0_flat__, nil_index_list(),
          context__.vals_r("cov_psi_sigma0"),
          "assigning variable cov_psi_sigma0_flat__");
        current_statement__ = 58;
        pos__ = 1;
        current_statement__ = 58;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 58;
          for (int sym2__ = 1; sym2__ <= p_sigma; ++sym2__) {
            current_statement__ = 58;
            assign(cov_psi_sigma0,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              cov_psi_sigma0_flat__[(pos__ - 1)],
              "assigning variable cov_psi_sigma0");
            current_statement__ = 58;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 59;
      validate_non_negative_index("cov_psi_xi0", "p_xi", p_xi);
      current_statement__ = 60;
      validate_non_negative_index("cov_psi_xi0", "p_xi", p_xi);
      current_statement__ = 61;
      context__.validate_dims("data initialization","cov_psi_xi0","double",
          context__.to_vec(p_xi, p_xi));
      cov_psi_xi0 = Eigen::Matrix<double, -1, -1>(p_xi, p_xi);
      stan::math::fill(cov_psi_xi0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> cov_psi_xi0_flat__;
        current_statement__ = 61;
        assign(cov_psi_xi0_flat__, nil_index_list(),
          context__.vals_r("cov_psi_xi0"),
          "assigning variable cov_psi_xi0_flat__");
        current_statement__ = 61;
        pos__ = 1;
        current_statement__ = 61;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 61;
          for (int sym2__ = 1; sym2__ <= p_xi; ++sym2__) {
            current_statement__ = 61;
            assign(cov_psi_xi0,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              cov_psi_xi0_flat__[(pos__ - 1)],
              "assigning variable cov_psi_xi0");
            current_statement__ = 61;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 62;
      validate_non_negative_index("mean_psi_mu0", "p_mu", p_mu);
      current_statement__ = 63;
      context__.validate_dims("data initialization","mean_psi_mu0","double",
          context__.to_vec(p_mu));
      mean_psi_mu0 = Eigen::Matrix<double, -1, 1>(p_mu);
      stan::math::fill(mean_psi_mu0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mean_psi_mu0_flat__;
        current_statement__ = 63;
        assign(mean_psi_mu0_flat__, nil_index_list(),
          context__.vals_r("mean_psi_mu0"),
          "assigning variable mean_psi_mu0_flat__");
        current_statement__ = 63;
        pos__ = 1;
        current_statement__ = 63;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 63;
          assign(mean_psi_mu0,
            cons_list(index_uni(sym1__), nil_index_list()),
            mean_psi_mu0_flat__[(pos__ - 1)],
            "assigning variable mean_psi_mu0");
          current_statement__ = 63;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 64;
      validate_non_negative_index("mean_psi_sigma0", "p_sigma", p_sigma);
      current_statement__ = 65;
      context__.validate_dims("data initialization","mean_psi_sigma0",
          "double",context__.to_vec(p_sigma));
      mean_psi_sigma0 = Eigen::Matrix<double, -1, 1>(p_sigma);
      stan::math::fill(mean_psi_sigma0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mean_psi_sigma0_flat__;
        current_statement__ = 65;
        assign(mean_psi_sigma0_flat__, nil_index_list(),
          context__.vals_r("mean_psi_sigma0"),
          "assigning variable mean_psi_sigma0_flat__");
        current_statement__ = 65;
        pos__ = 1;
        current_statement__ = 65;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 65;
          assign(mean_psi_sigma0,
            cons_list(index_uni(sym1__), nil_index_list()),
            mean_psi_sigma0_flat__[(pos__ - 1)],
            "assigning variable mean_psi_sigma0");
          current_statement__ = 65;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 66;
      validate_non_negative_index("mean_psi_xi0", "p_xi", p_xi);
      current_statement__ = 67;
      context__.validate_dims("data initialization","mean_psi_xi0","double",
          context__.to_vec(p_xi));
      mean_psi_xi0 = Eigen::Matrix<double, -1, 1>(p_xi);
      stan::math::fill(mean_psi_xi0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mean_psi_xi0_flat__;
        current_statement__ = 67;
        assign(mean_psi_xi0_flat__, nil_index_list(),
          context__.vals_r("mean_psi_xi0"),
          "assigning variable mean_psi_xi0_flat__");
        current_statement__ = 67;
        pos__ = 1;
        current_statement__ = 67;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 67;
          assign(mean_psi_xi0,
            cons_list(index_uni(sym1__), nil_index_list()),
            mean_psi_xi0_flat__[(pos__ - 1)],
            "assigning variable mean_psi_xi0");
          current_statement__ = 67;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 68;
      validate_non_negative_index("psi_mu", "p_mu", p_mu);
      current_statement__ = 69;
      validate_non_negative_index("psi_sigma", "p_sigma", p_sigma);
      current_statement__ = 70;
      validate_non_negative_index("psi_xi", "p_xi", p_xi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += p_mu;
      num_params_r__ += p_sigma;
      num_params_r__ += p_xi;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_TVGEV_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> psi_mu;
      psi_mu = Eigen::Matrix<local_scalar_t__, -1, 1>(p_mu);
      stan::math::fill(psi_mu, DUMMY_VAR__);
      
      current_statement__ = 1;
      psi_mu = in__.vector(p_mu);
      Eigen::Matrix<local_scalar_t__, -1, 1> psi_sigma;
      psi_sigma = Eigen::Matrix<local_scalar_t__, -1, 1>(p_sigma);
      stan::math::fill(psi_sigma, DUMMY_VAR__);
      
      current_statement__ = 2;
      psi_sigma = in__.vector(p_sigma);
      Eigen::Matrix<local_scalar_t__, -1, 1> psi_xi;
      psi_xi = Eigen::Matrix<local_scalar_t__, -1, 1>(p_xi);
      stan::math::fill(psi_xi, DUMMY_VAR__);
      
      current_statement__ = 3;
      psi_xi = in__.vector(p_xi);
      {
        current_statement__ = 4;
        validate_non_negative_index("mu", "n", n);
        Eigen::Matrix<local_scalar_t__, -1, 1> mu;
        mu = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
        stan::math::fill(mu, DUMMY_VAR__);
        
        current_statement__ = 6;
        validate_non_negative_index("sigma", "n", n);
        Eigen::Matrix<local_scalar_t__, -1, 1> sigma;
        sigma = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
        stan::math::fill(sigma, DUMMY_VAR__);
        
        current_statement__ = 8;
        validate_non_negative_index("xi", "n", n);
        Eigen::Matrix<local_scalar_t__, -1, 1> xi;
        xi = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
        stan::math::fill(xi, DUMMY_VAR__);
        
        current_statement__ = 10;
        lp_accum__.add(
          multi_normal_lpdf<propto__>(psi_mu, mean_psi_mu0, cov_psi_mu0));
        current_statement__ = 17;
        if (cst_mu) {
          current_statement__ = 15;
          for (int i = 1; i <= n; ++i) {
            current_statement__ = 13;
            assign(mu, cons_list(index_uni(i), nil_index_list()),
              psi_mu[(1 - 1)], "assigning variable mu");}
        } else {
          current_statement__ = 11;
          assign(mu, nil_index_list(), multiply(X_mu, psi_mu),
            "assigning variable mu");
        }
        current_statement__ = 18;
        lp_accum__.add(
          multi_normal_lpdf<propto__>(psi_sigma, mean_psi_sigma0,
            cov_psi_sigma0));
        current_statement__ = 25;
        if (cst_sigma) {
          current_statement__ = 23;
          for (int i = 1; i <= n; ++i) {
            current_statement__ = 21;
            assign(sigma, cons_list(index_uni(i), nil_index_list()),
              psi_sigma[(1 - 1)], "assigning variable sigma");}
        } else {
          current_statement__ = 19;
          assign(sigma, nil_index_list(), multiply(X_sigma, psi_sigma),
            "assigning variable sigma");
        }
        current_statement__ = 26;
        lp_accum__.add(
          multi_normal_lpdf<propto__>(psi_xi, mean_psi_xi0, cov_psi_xi0));
        current_statement__ = 33;
        if (cst_xi) {
          current_statement__ = 31;
          for (int i = 1; i <= n; ++i) {
            current_statement__ = 29;
            assign(xi, cons_list(index_uni(i), nil_index_list()),
              psi_xi[(1 - 1)], "assigning variable xi");}
        } else {
          current_statement__ = 27;
          assign(xi, nil_index_list(), multiply(X_xi, psi_xi),
            "assigning variable xi");
        }
        current_statement__ = 34;
        lp_accum__.add(gev_lpdf<propto__>(y, mu, sigma, xi, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_TVGEV_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> psi_mu;
      psi_mu = Eigen::Matrix<double, -1, 1>(p_mu);
      stan::math::fill(psi_mu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      psi_mu = in__.vector(p_mu);
      Eigen::Matrix<double, -1, 1> psi_sigma;
      psi_sigma = Eigen::Matrix<double, -1, 1>(p_sigma);
      stan::math::fill(psi_sigma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      psi_sigma = in__.vector(p_sigma);
      Eigen::Matrix<double, -1, 1> psi_xi;
      psi_xi = Eigen::Matrix<double, -1, 1>(p_xi);
      stan::math::fill(psi_xi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      psi_xi = in__.vector(p_xi);
      for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
        vars__.emplace_back(psi_mu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
        vars__.emplace_back(psi_sigma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
        vars__.emplace_back(psi_xi[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> psi_mu;
      psi_mu = Eigen::Matrix<double, -1, 1>(p_mu);
      stan::math::fill(psi_mu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> psi_mu_flat__;
        current_statement__ = 1;
        assign(psi_mu_flat__, nil_index_list(), context__.vals_r("psi_mu"),
          "assigning variable psi_mu_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
          current_statement__ = 1;
          assign(psi_mu, cons_list(index_uni(sym1__), nil_index_list()),
            psi_mu_flat__[(pos__ - 1)], "assigning variable psi_mu");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> psi_sigma;
      psi_sigma = Eigen::Matrix<double, -1, 1>(p_sigma);
      stan::math::fill(psi_sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> psi_sigma_flat__;
        current_statement__ = 2;
        assign(psi_sigma_flat__, nil_index_list(),
          context__.vals_r("psi_sigma"),
          "assigning variable psi_sigma_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
          current_statement__ = 2;
          assign(psi_sigma, cons_list(index_uni(sym1__), nil_index_list()),
            psi_sigma_flat__[(pos__ - 1)], "assigning variable psi_sigma");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> psi_xi;
      psi_xi = Eigen::Matrix<double, -1, 1>(p_xi);
      stan::math::fill(psi_xi, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> psi_xi_flat__;
        current_statement__ = 3;
        assign(psi_xi_flat__, nil_index_list(), context__.vals_r("psi_xi"),
          "assigning variable psi_xi_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
          current_statement__ = 3;
          assign(psi_xi, cons_list(index_uni(sym1__), nil_index_list()),
            psi_xi_flat__[(pos__ - 1)], "assigning variable psi_xi");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
        vars__.emplace_back(psi_mu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
        vars__.emplace_back(psi_sigma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
        vars__.emplace_back(psi_xi[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("psi_mu");
    names__.emplace_back("psi_sigma");
    names__.emplace_back("psi_xi");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(p_mu)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(p_sigma)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(p_xi)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi_mu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi_sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi_xi" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= p_mu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi_mu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= p_sigma; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi_sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= p_xi; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi_xi" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"psi_mu\",\"type\":{\"name\":\"vector\",\"length\":" << p_mu << "},\"block\":\"parameters\"},{\"name\":\"psi_sigma\",\"type\":{\"name\":\"vector\",\"length\":" << p_sigma << "},\"block\":\"parameters\"},{\"name\":\"psi_xi\",\"type\":{\"name\":\"vector\",\"length\":" << p_xi << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"psi_mu\",\"type\":{\"name\":\"vector\",\"length\":" << p_mu << "},\"block\":\"parameters\"},{\"name\":\"psi_sigma\",\"type\":{\"name\":\"vector\",\"length\":" << p_sigma << "},\"block\":\"parameters\"},{\"name\":\"psi_xi\",\"type\":{\"name\":\"vector\",\"length\":" << p_xi << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_TVGEV_namespace::model_TVGEV;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_TVGEV_namespace::profiles__;
}
#endif
#endif
